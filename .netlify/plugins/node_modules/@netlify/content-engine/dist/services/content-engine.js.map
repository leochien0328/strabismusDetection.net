{"version":3,"file":"content-engine.js","names":["_graphql","require","_index","_express","_interopRequireDefault","_inspector","_opentracing","_reporter","_tracer","_detectPortInUseAndPrompt","_","_redux","_datastore","_printInstructions","_2","_context","_frameworkHooks","tracer","globalTracer","openDebuggerPort","debugInfo","inspector","url","undefined","break","open","port","getDebugPort","getDebugInfo","program","Object","prototype","hasOwnProperty","call","inspect","inspectBrk","contentEngine","verbose","openTracingConfigFile","host","directory","engineConfig","frameworkHooks","frameworkHooksPath","startup","before","process","cwd","global","__GATSBY","env","GATSBY_NODE_GLOBALS","JSON","parse","hostname","sitePackageJson","parseInt","store","reporter","console","info","name","setVerbose","initTracer","loadData","webhookBody","parentSpan","shouldBuildSchema","connector","activity","activityTimer","start","customizeSchema","refresh","after","sourceNodes","webhookSourcePluginName","buildSchema","saveState","end","app","server","serverShouldBeRunning","initialized","publicInitialize","getDataStore","ready","appExists","Boolean","detectPortInUseAndPrompt","e","message","exit","express","use","req","res","next","decodeURIComponent","path","status","send","initialize","config","Error","onStdOut","onStdErr","onMessage","sendMessage","clearListeners","args","startSpan","finish","sync","runServer","log","error","savePartialStateToDisk","startGraphQLServer","close","printInstructions","stop","restart","test","throwOutsideTestEnv","getNodes","getNodesByType","getNode","query","variables","schema","getState","result","graphql","source","rootValue","contextValue","withResolverContext","schemaComposer","schemaCustomization","composer","context","customContext","variableValues","getProcess","exports"],"sources":["../../src/services/content-engine.ts"],"sourcesContent":["import { graphql } from \"../graphql\";\nimport { getNode, getNodes, getNodesByType } from \"./../datastore/index\";\nimport express from \"express\";\nimport inspector from \"inspector\";\nimport { globalTracer } from \"opentracing\";\n\nimport reporter from \"../reporter\";\nimport { initTracer } from \"../utils/tracer\";\nimport { detectPortInUseAndPrompt } from \"../utils/detect-port-in-use-and-prompt\";\nimport {\n  buildSchema,\n  customizeSchema,\n  initialize,\n  sourceNodes,\n  startGraphQLServer,\n} from \".\";\nimport { store, saveState, savePartialStateToDisk } from \"../redux\";\nimport { IDataLayerContext } from \"./types\";\nimport { IDebugInfo, IProgram } from \"../commands/types\";\nimport { getDataStore } from \"../datastore\";\nimport { Listener } from \"../utils/start-server\";\nimport { printInstructions } from \"../utils/print-instructions\";\nimport {\n  ContentEngineConfiguration,\n  ContentEnginePublicAPI,\n  SyncState,\n  throwOutsideTestEnv,\n} from \"..\";\nimport { ExecutionResult } from \"graphql\";\nimport withResolverContext from \"../schema/context\";\nimport { OperationContext } from \"graphql-http\";\nimport { ChildProcess } from \"child_process\";\nimport { frameworkHooks } from \"../framework-hooks\";\n\nconst tracer = globalTracer();\n\nconst openDebuggerPort = (debugInfo: IDebugInfo): void => {\n  if (inspector.url() !== undefined) {\n    return; // fixes #26708\n  }\n\n  if (debugInfo.break) {\n    inspector.open(debugInfo.port, undefined, true);\n    // eslint-disable-next-line no-debugger\n    debugger;\n  } else {\n    inspector.open(debugInfo.port);\n  }\n};\n\n// Return a user-supplied port otherwise the default Node.js debugging port\nconst getDebugPort = (port?: number): number => port ?? 9229;\n\nconst getDebugInfo = (program: IProgram): IDebugInfo | null => {\n  if (Object.prototype.hasOwnProperty.call(program, `inspect`)) {\n    return {\n      port: getDebugPort(program.inspect),\n      break: false,\n    };\n  } else if (Object.prototype.hasOwnProperty.call(program, `inspectBrk`)) {\n    return {\n      port: getDebugPort(program.inspectBrk),\n      break: true,\n    };\n  } else {\n    return null;\n  }\n};\n\nexport const contentEngine = (\n  {\n    verbose,\n    openTracingConfigFile,\n    host,\n    port,\n    directory,\n    engineConfig,\n    frameworkHooks: frameworkHooksPath,\n  }: ContentEngineConfiguration = { directory: `` },\n): ContentEnginePublicAPI => {\n  if (frameworkHooksPath) {\n    require(frameworkHooksPath);\n  }\n\n  frameworkHooks.startup.before();\n\n  directory ||= process.cwd();\n\n  // provide global Gatsby object\n  global.__GATSBY = process.env.GATSBY_NODE_GLOBALS\n    ? JSON.parse(process.env.GATSBY_NODE_GLOBALS)\n    : {};\n\n  const hostname = `0.0.0.0`;\n\n  const program = {\n    directory,\n    sitePackageJson: require(`${directory}/package.json`),\n    port: (typeof port === `string` ? parseInt(port, 10) : port) || 8000,\n    hostname,\n    host: host || `localhost`,\n    store,\n    reporter,\n    openTracingConfigFile: ``,\n    debugInfo: null,\n  } as IProgram;\n\n  program.debugInfo = getDebugInfo(program);\n\n  console.info(\n    `[content-engine] starting \"${\n      program.sitePackageJson.name || `unknown`\n    }\" engine`,\n  );\n\n  program.verbose = verbose || false;\n  reporter.setVerbose(program.verbose);\n\n  if (program.debugInfo) {\n    openDebuggerPort(program.debugInfo);\n  }\n\n  if (openTracingConfigFile) {\n    initTracer(openTracingConfigFile);\n  }\n\n  async function loadData(\n    {\n      webhookBody,\n      parentSpan,\n      shouldBuildSchema = true,\n      connector,\n    }: Partial<\n      IDataLayerContext & {\n        shouldBuildSchema?: boolean;\n        connector?: string;\n      }\n    > = {\n      shouldBuildSchema: true,\n    },\n  ): Promise<void> {\n    const activity = reporter.activityTimer(`update integration data`);\n\n    activity.start();\n\n    try {\n      await frameworkHooks.customizeSchema.before();\n      await customizeSchema({\n        parentSpan,\n        refresh: true,\n      });\n      await frameworkHooks.customizeSchema.after();\n\n      await frameworkHooks.sourceNodes.before();\n      await sourceNodes({\n        parentSpan,\n        webhookBody,\n        store,\n        webhookSourcePluginName: connector,\n      });\n      await frameworkHooks.sourceNodes.after();\n\n      await frameworkHooks.buildSchema.before();\n      if (shouldBuildSchema) {\n        await buildSchema({\n          parentSpan,\n        });\n      }\n      await frameworkHooks.buildSchema.after();\n\n      saveState();\n    } finally {\n      activity.end();\n    }\n  }\n\n  let app: express.Express;\n  let server: Listener;\n  let serverShouldBeRunning = false;\n  let initialized = false;\n\n  const publicInitialize = async ({ parentSpan }) => {\n    await getDataStore().ready();\n    const appExists = Boolean(app);\n\n    if (!appExists && serverShouldBeRunning) {\n      try {\n        program.port = await detectPortInUseAndPrompt(program.port, hostname);\n      } catch (e) {\n        if (e.message === `USER_REJECTED`) {\n          process.exit(0);\n        }\n\n        throw e;\n      }\n\n      app = express();\n\n      app.use((req, res, next) => {\n        try {\n          decodeURIComponent(req.path);\n        } catch (e) {\n          return res.status(500).send(`URI malformatted`);\n        }\n\n        return next();\n      });\n    }\n\n    if (!initialized) {\n      console.info(`[content-engine] initializing`);\n      await initialize({\n        parentSpan,\n        program,\n        reporter,\n        app,\n        engineConfig,\n      });\n      initialized = true;\n    }\n  };\n\n  frameworkHooks.startup.after();\n\n  return {\n    config: async () => {\n      throw new Error(\n        `contentEngine().config() can only be called when contentEngine({ runInSubProcess: true }) is set.`,\n      );\n    },\n    onStdOut: () => {\n      throw new Error(\n        `contentEngine().onStdOut() can only be called when contentEngine({ runInSubProcess: true }) is set.`,\n      );\n    },\n    onStdErr: () => {\n      throw new Error(\n        `contentEngine().onStdErr() can only be called when contentEngine({ runInSubProcess: true }) is set.`,\n      );\n    },\n    onMessage: () => {\n      throw new Error(\n        `contentEngine().onMessage() can only be called when contentEngine({ runInSubProcess: true }) is set.`,\n      );\n    },\n    sendMessage: () => {\n      throw new Error(\n        `contentEngine().sendMessage() can only be called when contentEngine({ runInSubProcess: true }) is set.`,\n      );\n    },\n    clearListeners: () => {\n      throw new Error(\n        `contentEngine().clearListeners() can only be called when contentEngine({ runInSubProcess: true }) is set.`,\n      );\n    },\n    initialize: async (args) => {\n      const parentSpan = tracer.startSpan(`initialize`);\n      await publicInitialize({ ...args, parentSpan });\n      parentSpan.finish();\n    },\n    sync: async (\n      { runServer, webhookBody, buildSchema = true, connector } = {\n        buildSchema: true,\n      },\n    ): Promise<SyncState> => {\n      console.log(`[content-engine] sync started`);\n      await frameworkHooks.sync.before();\n      if (typeof runServer !== `undefined`) {\n        serverShouldBeRunning = runServer;\n      }\n\n      const parentSpan = tracer.startSpan(`sync-data`);\n\n      await publicInitialize({\n        parentSpan,\n      });\n\n      try {\n        await loadData({\n          parentSpan,\n          webhookBody,\n          shouldBuildSchema: buildSchema,\n          connector,\n        });\n      } catch (e) {\n        console.error(`[content-engine] error loading data`, e);\n        throw e;\n      }\n\n      savePartialStateToDisk([`inferenceMetadata`]);\n\n      if (serverShouldBeRunning && !server) {\n        server = await startGraphQLServer({\n          parentSpan,\n          program,\n          app,\n          store,\n          reporter,\n          loadData,\n        });\n      }\n\n      if (server && !serverShouldBeRunning) {\n        server.close();\n      }\n\n      await getDataStore().ready();\n      parentSpan.finish();\n\n      if (serverShouldBeRunning && server) {\n        printInstructions(program);\n      }\n\n      await frameworkHooks.sync.after();\n\n      return {};\n    },\n    stop: (): Promise<void> => {\n      throw new Error(\n        `contentEngine().stop() is only available when running in a subprocess with contentEngine({ runInSubProcess: true }) set.`,\n      );\n    },\n    restart: (): Promise<SyncState> => {\n      throw new Error(\n        `contentEngine().restart() is only available when running in a subprocess with contentEngine({ runInSubProcess: true }) set.`,\n      );\n    },\n\n    test: throwOutsideTestEnv({\n      getNodes,\n      getNodesByType,\n      getNode,\n      query: async (\n        query: string,\n        variables: Record<string, unknown>,\n      ): Promise<ExecutionResult> => {\n        if (!initialized) {\n          throw new Error(\n            `contentEngine().query() called before first contentEngine().sync() completed.\\nSchema customization has not run yet so the GraphQL API cannot be queried.`,\n          );\n        }\n\n        const { schema } = store.getState();\n\n        const result = await graphql({\n          schema,\n          source: query,\n          rootValue: {},\n          contextValue: withResolverContext({\n            schema: store.getState().schema,\n            schemaComposer: store.getState().schemaCustomization.composer,\n            context: {},\n            customContext: store.getState().schemaCustomization.context,\n          }) as unknown as OperationContext,\n          variableValues: variables,\n        });\n\n        return result;\n      },\n    }),\n\n    getProcess(): ChildProcess {\n      throw new Error(\n        `contentEngine().process is only available when running in a subprocess with contentEngine({ runInSubProcess: true }) set.`,\n      );\n    },\n  };\n};\n"],"mappings":"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"}