{"version":3,"file":"lmdb-datastore.js","names":["_lmdb","require","_nodes","_nodesByType","_iterable","_runQuery","_runFastFilters","_fsExtra","_redux","getDefaultDbPath","cwd","process","_process$env$FORCE_TE","dbFileName","env","NODE_ENV","FORCE_TEST_DATABASE_ID","JEST_WORKER_ID","stores","Map","getLmdbStore","dbPath","has","get","lmdbDatastore","resetCache","getNode","getTypes","countNodes","iterateNodes","iterateNodesByType","updateDataStore","ready","runQuery","getNodes","getNodesByType","preSyncDeletedNodeIdsCache","Set","rootDb","databases","getRootDb","Error","globalThis","__GATSBY_OPEN_ROOT_LMDBS","open","name","path","compression","set","getDatabases","__GATSBY_OPEN_LMDBS","nodes","openDB","cache","expirer","nodesByType","dupSort","metadata","useVersions","indexes","result","Array","from","type","nodesDb","GatsbyIterable","getKeys","snapshot","map","nodeId","undefined","filter","Boolean","getValues","id","node","asArray","typeName","stats","getStats","Math","max","Number","entryCount","size","getValuesCount","args","GATSBY_EXPERIMENTAL_LMDB_INDEXES","doRunQuery","datastore","Promise","resolve","runFastFiltersAndSort","store","dispatch","rm","recursive","force","restartDbs","dbs","all","close","delete","lastOperationPromise","action","transactionSync","clearSync","clearIndexes","_action$payload","operationPromise","updateNodes","updateNodesByType","payload","add","then","clear"],"sources":["../../../src/datastore/lmdb/lmdb-datastore.ts"],"sourcesContent":["import { RootDatabase, open, ArrayLikeIterable } from \"lmdb\";\n// import { performance } from \"perf_hooks\"\nimport type { ActionsUnion, IGatsbyNode } from \"../../redux/types\";\nimport { updateNodes } from \"./updates/nodes\";\nimport { updateNodesByType } from \"./updates/nodes-by-type\";\nimport { IDataStore, ILmdbDatabases, IQueryResult } from \"../types\";\nimport { GatsbyIterable } from \"../common/iterable\";\nimport { doRunQuery } from \"./query/run-query\";\nimport {\n  IRunFilterArg,\n  runFastFiltersAndSort,\n} from \"../in-memory/run-fast-filters\";\nimport { rm } from \"fs-extra\";\nimport { store } from \"../../redux\";\n\n/* eslint-disable @typescript-eslint/no-namespace */\ndeclare global {\n  namespace NodeJS {\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    interface Global {\n      __GATSBY_OPEN_LMDBS?: Map<string, ILmdbDatabases>;\n      __GATSBY_OPEN_ROOT_LMDBS?: Map<string, RootDatabase>;\n    }\n  }\n}\n\nexport function getDefaultDbPath(cwd: string = process.cwd()): string {\n  const dbFileName =\n    process.env.NODE_ENV === `test`\n      ? `test-datastore-${\n          // FORCE_TEST_DATABASE_ID will be set if this gets executed in worker context\n          // when running jest tests. JEST_WORKER_ID will be set when this gets executed directly\n          // in test context (jest will use jest-worker internally).\n          process.env.FORCE_TEST_DATABASE_ID ?? process.env.JEST_WORKER_ID\n        }`\n      : `datastore`;\n\n  return cwd + `/.cache/data/` + dbFileName;\n}\n\nconst stores = new Map<string, any>();\n\nexport function getLmdbStore({\n  dbPath = getDefaultDbPath(),\n}: { dbPath?: string } = {}): IDataStore {\n  if (stores.has(dbPath)) return stores.get(dbPath);\n\n  const lmdbDatastore = {\n    resetCache,\n    getNode,\n    getTypes,\n    countNodes,\n    iterateNodes,\n    iterateNodesByType,\n    updateDataStore,\n    ready,\n    runQuery,\n\n    // deprecated:\n    getNodes,\n    getNodesByType,\n  };\n\n  const preSyncDeletedNodeIdsCache = new Set();\n\n  let rootDb;\n  let databases;\n\n  function getRootDb(): RootDatabase {\n    if (!rootDb) {\n      if (!dbPath) {\n        throw new Error(`LMDB path is not set!`);\n      }\n\n      if (!globalThis.__GATSBY_OPEN_ROOT_LMDBS) {\n        globalThis.__GATSBY_OPEN_ROOT_LMDBS = new Map();\n      }\n      rootDb = globalThis.__GATSBY_OPEN_ROOT_LMDBS.get(dbPath);\n      if (rootDb) {\n        return rootDb;\n      }\n\n      rootDb = open({\n        name: `root`,\n        path: dbPath,\n        compression: true,\n      });\n\n      globalThis.__GATSBY_OPEN_ROOT_LMDBS.set(dbPath, rootDb);\n    }\n    return rootDb;\n  }\n\n  function getDatabases(): ILmdbDatabases {\n    if (!databases) {\n      // __GATSBY_OPEN_LMDBS tracks if we already opened given db in this process\n      // In `gatsby serve` case we might try to open it twice - once for engines\n      // and second to get access to `SitePage` nodes (to power trailing slashes\n      // redirect middleware). This ensure there is single instance within a process.\n      // Using more instances seems to cause weird random errors.\n      if (!globalThis.__GATSBY_OPEN_LMDBS) {\n        globalThis.__GATSBY_OPEN_LMDBS = new Map();\n      }\n      databases = globalThis.__GATSBY_OPEN_LMDBS.get(dbPath);\n      if (databases) {\n        return databases;\n      }\n\n      rootDb = getRootDb();\n      databases = {\n        nodes: rootDb.openDB({\n          name: `nodes`,\n          // FIXME: sharedStructuresKey breaks tests - probably need some cleanup for it on DELETE_CACHE\n          // sharedStructuresKey: Symbol.for(`structures`),\n          cache: {\n            // expirer: false disables LRU part and only take care of WeakRefs\n            // this way we don't retain nodes strongly, but will continue to\n            // reuse them if they are loaded already\n            expirer: false,\n          },\n        }),\n        nodesByType: rootDb.openDB({\n          name: `nodesByType`,\n          dupSort: true,\n        }),\n        metadata: rootDb.openDB({\n          name: `metadata`,\n          useVersions: true,\n        }),\n        indexes: rootDb.openDB({\n          name: `indexes`,\n          // TODO: use dupSort when this is ready: https://github.com/DoctorEvidence/lmdb-store/issues/66\n          // dupSort: true\n        }),\n      };\n      globalThis.__GATSBY_OPEN_LMDBS.set(dbPath, databases);\n    }\n\n    return databases;\n  }\n\n  /**\n   * @deprecated\n   */\n  function getNodes(): Array<IGatsbyNode> {\n    // const start = performance.now()\n    const result = Array.from<IGatsbyNode>(iterateNodes());\n    // const timeTotal = performance.now() - start\n    // console.warn(\n    //   `getNodes() is deprecated, use iterateNodes() instead; ` +\n    //     `array length: ${result.length}; time(ms): ${timeTotal}`\n    // )\n    return result ?? [];\n  }\n\n  /**\n   * @deprecated\n   */\n  function getNodesByType(type: string): Array<IGatsbyNode> {\n    // const start = performance.now()\n    const result = Array.from<IGatsbyNode>(iterateNodesByType(type));\n    // const timeTotal = performance.now() - start\n    // console.warn(\n    //   `getNodesByType() is deprecated, use iterateNodesByType() instead; ` +\n    //     `array length: ${result.length}; time(ms): ${timeTotal}`\n    // )\n    return result ?? [];\n  }\n\n  function iterateNodes(): GatsbyIterable<IGatsbyNode> {\n    // Additionally fetching items by id to leverage lmdb-store cache\n    const nodesDb = getDatabases().nodes;\n\n    return new GatsbyIterable(\n      nodesDb\n        .getKeys({ snapshot: false })\n        .map((nodeId) =>\n          typeof nodeId === `string` ? getNode(nodeId) : undefined,\n        )\n        .filter(Boolean) as ArrayLikeIterable<IGatsbyNode>,\n    );\n  }\n\n  function iterateNodesByType(type: string): GatsbyIterable<IGatsbyNode> {\n    const nodesByType = getDatabases().nodesByType;\n\n    return new GatsbyIterable(\n      nodesByType\n        .getValues(type)\n        .map((nodeId) => getNode(nodeId))\n        .filter(Boolean) as ArrayLikeIterable<IGatsbyNode>,\n    );\n  }\n\n  function getNode(id: string): IGatsbyNode | undefined {\n    if (!id || preSyncDeletedNodeIdsCache.has(id)) {\n      return undefined;\n    }\n\n    const { nodes } = getDatabases();\n    const node = nodes.get(id);\n    return node;\n  }\n\n  function getTypes(): Array<string> {\n    return getDatabases().nodesByType.getKeys({}).asArray;\n  }\n\n  function countNodes(typeName?: string): number {\n    if (!typeName) {\n      const stats = getDatabases().nodes.getStats() as { entryCount: number };\n      return Math.max(\n        Number(stats.entryCount) - preSyncDeletedNodeIdsCache.size,\n        0,\n      ); // FIXME: add -1 when restoring shared structures key\n    }\n\n    const { nodesByType } = getDatabases();\n    return nodesByType.getValuesCount(typeName);\n  }\n\n  async function runQuery(args: IRunFilterArg): Promise<IQueryResult> {\n    if (process.env.GATSBY_EXPERIMENTAL_LMDB_INDEXES) {\n      return await doRunQuery({\n        datastore: lmdbDatastore,\n        databases: getDatabases(),\n        ...args,\n      });\n    }\n    return Promise.resolve(runFastFiltersAndSort(args));\n  }\n\n  async function resetCache(): Promise<void> {\n    store.dispatch({\n      type: `DELETE_CACHE`,\n      dbPath,\n    });\n\n    await rm(dbPath, { recursive: true, force: true });\n    await restartDbs();\n    await ready();\n  }\n\n  async function restartDbs() {\n    const dbs = getDatabases();\n\n    await Promise.all([\n      dbs.nodes.close(),\n      dbs.nodesByType.close(),\n      dbs.metadata.close(),\n      dbs.indexes.close(),\n      rootDb.close(),\n    ]);\n\n    globalThis.__GATSBY_OPEN_ROOT_LMDBS.delete(dbPath);\n    globalThis.__GATSBY_OPEN_LMDBS.delete(dbPath);\n    rootDb = undefined;\n    databases = undefined;\n    getDatabases();\n  }\n\n  let lastOperationPromise: Promise<any> = Promise.resolve();\n\n  function updateDataStore(action: ActionsUnion): void {\n    switch (action.type) {\n      case `DELETE_CACHE`: {\n        const dbs = getDatabases();\n\n        // Force sync commit\n        dbs.nodes.transactionSync(() => {\n          dbs.nodes.clearSync();\n          dbs.nodesByType.clearSync();\n          dbs.metadata.clearSync();\n          dbs.indexes.clearSync();\n        });\n\n        break;\n      }\n      case `SET_PROGRAM`: {\n        // TODO: remove this when we have support for incremental indexes in lmdb\n        clearIndexes();\n        break;\n      }\n      case `CREATE_NODE`:\n      case `DELETE_NODE`:\n      case `ADD_FIELD_TO_NODE`:\n      case `ADD_CHILD_NODE_TO_PARENT_NODE`: {\n        const dbs = getDatabases();\n        const operationPromise = Promise.all([\n          updateNodes(dbs.nodes, action),\n          updateNodesByType(dbs.nodesByType, action),\n        ]);\n        lastOperationPromise = operationPromise;\n\n        // if create is used in the same transaction as delete we should remove it from cache\n        if (action.type === `CREATE_NODE`) {\n          preSyncDeletedNodeIdsCache.delete(action.payload.id);\n        }\n\n        if (action.type === `DELETE_NODE` && action.payload?.id) {\n          preSyncDeletedNodeIdsCache.add(action.payload.id);\n          operationPromise.then(() => {\n            // only clear if no other operations have been done in the meantime\n            if (lastOperationPromise === operationPromise) {\n              preSyncDeletedNodeIdsCache.clear();\n            }\n          });\n        }\n      }\n    }\n  }\n\n  function clearIndexes(): void {\n    const dbs = getDatabases();\n    dbs.nodes.transactionSync(() => {\n      dbs.metadata.clearSync();\n      dbs.indexes.clearSync();\n    });\n  }\n\n  /**\n   * Resolves when all the data is synced\n   */\n  async function ready(): Promise<void> {\n    await lastOperationPromise;\n  }\n\n  // TODO: remove this when we have support for incremental indexes in lmdb\n  clearIndexes();\n\n  stores.set(dbPath, lmdbDatastore);\n\n  return lmdbDatastore;\n}\n"],"mappings":"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"}