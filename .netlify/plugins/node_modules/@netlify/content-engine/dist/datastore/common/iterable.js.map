{"version":3,"file":"iterable.js","names":["_lmdb","require","GatsbyIterable","constructor","source","Symbol","iterator","i","val","clearKeptObjects","concat","other","concatSequence","map","fn","mapSequence","filter","predicate","filterSequence","reduce","initialValue","acc","value","slice","start","end","Error","sliceSequence","deduplicate","keyFn","deduplicateSequence","forEach","callback","mergeSorted","comparator","intersectSorted","deduplicateSorted","exports","isIterable","obj","isNonArrayIterable","Array","isArray","index","item","first","second","registered","Set","current","key","has","add","defaultComparator","prev","firstSorted","secondSorted","iter1","iter2","a","next","b","done","return","eq"],"sources":["../../../src/datastore/common/iterable.ts"],"sourcesContent":["declare module \"lmdb\" {\n  // currently lmdb doesn't have typings for this export\n  export function clearKeptObjects(): void;\n}\n\nimport { clearKeptObjects } from \"lmdb\";\n/**\n * Wrapper for any iterable providing chainable interface and convenience methods\n * similar to array.\n *\n * Additionally provides convenience methods for sorted iterables.\n *\n * Note: avoiding async iterables because of perf reasons, see https://github.com/nodejs/node/issues/31979\n * (fortunately lmdb can traverse stuff in sync manner very fast)\n */\nexport class GatsbyIterable<T> {\n  constructor(private source: Iterable<T> | (() => Iterable<T>)) {}\n\n  *[Symbol.iterator](): Iterator<T> {\n    const source =\n      typeof this.source === `function` ? this.source() : this.source;\n\n    let i = 0;\n    for (const val of source) {\n      yield val;\n\n      // clearKeptObjects just make it possible for WeakRefs used in any way during current\n      // sync execution tick to be garbage collected. It doesn't force GC, just remove\n      // internal strong references in V8.\n      // see https://github.com/kriszyp/weak-lru-cache/issues/4\n      if (++i % 100 === 0) {\n        clearKeptObjects();\n      }\n    }\n  }\n\n  concat<U>(other: Iterable<U>): GatsbyIterable<T | U> {\n    return new GatsbyIterable(() => concatSequence(this, other));\n  }\n\n  map<U>(fn: (entry: T, index: number) => U): GatsbyIterable<U> {\n    return new GatsbyIterable(() => mapSequence(this, fn));\n  }\n\n  filter(predicate: (entry: T) => unknown): GatsbyIterable<T> {\n    return new GatsbyIterable(() => filterSequence(this, predicate));\n  }\n  reduce(fn: (acc: T, value: T, index: number) => T): T;\n  reduce<U>(fn: (acc: U, value: T, index: number) => U, initialValue: U): U;\n  reduce<U>(fn: (acc: U, value: T, index: number) => U, initialValue?: U): U {\n    let i = 0;\n    let acc = initialValue as U;\n    for (const value of this) {\n      if (i === 0 && typeof acc === `undefined`) {\n        acc = value as unknown as U;\n      } else {\n        acc = fn(acc, value, i++);\n      }\n    }\n    return acc;\n  }\n\n  slice(start: number, end?: number): GatsbyIterable<T> {\n    if ((typeof end !== `undefined` && end < start) || start < 0)\n      throw new Error(\n        `Both arguments must not be negative and end must be greater than start`,\n      );\n    return new GatsbyIterable<T>(() => sliceSequence(this, start, end));\n  }\n\n  deduplicate(keyFn?: (entry: T) => unknown): GatsbyIterable<T> {\n    return new GatsbyIterable<T>(() => deduplicateSequence(this, keyFn));\n  }\n\n  forEach(callback: (entry: T, index: number) => unknown): void {\n    let i = 0;\n    for (const value of this) {\n      callback(value, i++);\n    }\n  }\n\n  /**\n   * Assuming both this and the other iterable are sorted\n   * produces the new sorted iterable with interleaved values.\n   *\n   * Note: this method is not removing duplicates\n   */\n  mergeSorted<U = T>(\n    other: Iterable<U>,\n    comparator?: (a: T | U, b: T | U) => number,\n  ): GatsbyIterable<T | U> {\n    return new GatsbyIterable(() => mergeSorted(this, other, comparator));\n  }\n\n  /**\n   * Assuming both this and the other iterable are sorted\n   * produces the new sorted iterable with values from this iterable\n   * that also exist in the other iterable.\n   */\n  intersectSorted<U = T>(\n    other: Iterable<U>,\n    comparator?: (a: T | U, b: T | U) => number,\n  ): GatsbyIterable<T | U> {\n    return new GatsbyIterable(() => intersectSorted(this, other, comparator));\n  }\n\n  /**\n   * Assuming this iterable is sorted, removes duplicates from it\n   * by applying comparator(prev, current) to sibling iterable values.\n   *\n   * Comparator function is expected to return 0 when items are equal,\n   * similar to Array.prototype.sort() argument.\n   *\n   * If comparator is not set, uses strict === comparison\n   */\n  deduplicateSorted(comparator?: (a: T, b: T) => number): GatsbyIterable<T> {\n    return new GatsbyIterable<T>(() => deduplicateSorted(this, comparator));\n  }\n}\n\n/**\n * Returns true when passed value is iterable\n */\nexport function isIterable(obj: unknown): obj is Iterable<any> {\n  if (typeof obj !== `object` || obj === null) {\n    return false;\n  }\n  return typeof obj[Symbol.iterator] === `function`;\n}\n\nexport function isNonArrayIterable<T>(value: unknown): value is Iterable<T> {\n  return isIterable(value) && !Array.isArray(value);\n}\n\nfunction* mapSequence<T, U>(\n  source: Iterable<T>,\n  fn: (arg: T, index: number) => U,\n): Generator<U> {\n  let i = 0;\n  for (const value of source) {\n    yield fn(value, i++);\n  }\n}\n\nfunction* sliceSequence<T>(\n  source: Iterable<T>,\n  start: number,\n  end: number | undefined,\n): Generator<T> {\n  let index = -1;\n  for (const item of source) {\n    index++;\n    if (index < start) continue;\n    if (typeof end !== `undefined` && index >= end) break;\n    yield item;\n  }\n}\n\nfunction* filterSequence<T>(\n  source: Iterable<T>,\n  predicate: (arg: T) => unknown,\n): Generator<T> {\n  for (const value of source) {\n    if (predicate(value)) {\n      yield value;\n    }\n  }\n}\n\nfunction* concatSequence<T, U>(\n  first: Iterable<T>,\n  second: Iterable<U>,\n): Generator<U | T> {\n  for (const value of first) {\n    yield value;\n  }\n  for (const value of second) {\n    yield value;\n  }\n}\n\nfunction* deduplicateSequence<T>(\n  source: Iterable<T>,\n  keyFn?: (entry: T) => unknown,\n): Generator<T> {\n  // TODO: this can be potentially improved by using bloom filters?\n  const registered = new Set<unknown>();\n\n  for (const current of source) {\n    const key = keyFn ? keyFn(current) : current;\n    if (!registered.has(key)) {\n      registered.add(key);\n      yield current;\n    }\n  }\n}\n\nfunction* deduplicateSorted<T>(\n  source: Iterable<T>,\n  comparator: (a: T, b: T) => number = defaultComparator,\n): Generator<T> {\n  let prev;\n  for (const current of source) {\n    if (typeof prev === `undefined` || comparator(prev, current) !== 0) {\n      yield current;\n    }\n    prev = current;\n  }\n}\n\n// Merge two originally sorted iterables:\nfunction* mergeSorted<T, U = T>(\n  firstSorted: Iterable<T>,\n  secondSorted: Iterable<U>,\n  comparator: (a: T | U, b: T | U) => number = defaultComparator,\n): Generator<T | U> {\n  const iter1 = firstSorted[Symbol.iterator]();\n  const iter2 = secondSorted[Symbol.iterator]();\n  try {\n    let a = iter1.next();\n    let b = iter2.next();\n    while (!a.done && !b.done) {\n      if (comparator(a.value, b.value) <= 0) {\n        yield a.value;\n        a = iter1.next();\n      } else {\n        yield b.value;\n        b = iter2.next();\n      }\n    }\n    while (!a.done) {\n      yield a.value;\n      a = iter1.next();\n    }\n    while (!b.done) {\n      yield b.value;\n      b = iter2.next();\n    }\n  } finally {\n    // If generator is exited early, make sure to close iterators too\n    // See https://raganwald.com/2017/07/22/closing-iterables-is-a-leaky-abstraction.html#more-about-closing-iterators-explicitly\n    if (typeof iter1.return === `function`) iter1.return();\n    if (typeof iter2.return === `function`) iter2.return();\n  }\n}\n\nfunction* intersectSorted<T, U = T>(\n  firstSorted: Iterable<T>,\n  secondSorted: Iterable<U>,\n  comparator: (a: T | U, b: T | U) => number = defaultComparator,\n): Generator<T> {\n  const iter1 = firstSorted[Symbol.iterator]();\n  const iter2 = secondSorted[Symbol.iterator]();\n  try {\n    let a = iter1.next();\n    let b = iter2.next();\n\n    while (!a.done && !b.done) {\n      const eq = comparator(a.value, b.value);\n\n      if (eq < 0) {\n        // a < b\n        a = iter1.next();\n      } else if (eq > 0) {\n        // a > b\n        b = iter2.next();\n      } else {\n        yield a.value;\n        a = iter1.next();\n      }\n    }\n  } finally {\n    if (typeof iter1.return === `function`) iter1.return();\n    if (typeof iter2.return === `function`) iter2.return();\n  }\n}\n\nfunction defaultComparator<T, U = T>(a: T | U, b: T | U): number {\n  if (a === b) {\n    return 0;\n  }\n  return a > b ? 1 : -1;\n}\n"],"mappings":"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"}