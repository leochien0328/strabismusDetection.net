{"version":3,"file":"type-conflict-reporter.js","names":["_sortBy","_interopRequireDefault","require","_reporter","_typeOf","_util","formatValue","value","Array","isArray","util","inspect","colors","depth","breakLength","Infinity","output","length","push","wasElipsisLast","usedTypes","forEach","item","type","typeOf","includes","join","TypeConflictEntry","constructor","selector","types","Map","addExample","parent","_parent$internal$desc","_parent$internal","set","description","internal","printEntry","sortedByTypeName","sortBy","from","entries","typeName","report","log","map","exports","TypeConflictReporter","clearConflicts","clear","getEntryFromSelector","dataEntry","get","addConflict","examples","substring","entry","filter","example","printConflicts","size","warn","getConflicts","values"],"sources":["../../../src/schema/infer/type-conflict-reporter.ts"],"sourcesContent":["import sortBy from \"lodash/sortBy\";\nimport report from \"../../reporter\";\nimport typeOf from \"type-of\";\nimport util from \"util\";\n\nimport { Node } from \"../../types\";\n\nexport interface ITypeConflictExample {\n  value: unknown;\n  type: string;\n  parent?: Node;\n  arrayTypes?: Array<string>;\n}\n\ninterface ITypeConflict {\n  value: unknown;\n  description?: string;\n}\n\nconst formatValue = (value: unknown): string => {\n  if (!Array.isArray(value)) {\n    return util.inspect(value, {\n      colors: true,\n      depth: 0,\n      breakLength: Infinity,\n    });\n  }\n\n  const output: Array<string> = [];\n\n  if (value.length === 1) {\n    // For arrays usually a single conflicting item is exposed vs. the whole array\n    output.push(`...`);\n    output.push(formatValue(value[0]));\n    output.push(`...`);\n  } else {\n    let wasElipsisLast = false;\n    const usedTypes: Array<string> = [];\n    value.forEach((item) => {\n      const type = typeOf(item);\n      if (usedTypes.includes(type)) {\n        if (!wasElipsisLast) {\n          output.push(`...`);\n          wasElipsisLast = true;\n        }\n      } else {\n        output.push(formatValue(item));\n        wasElipsisLast = false;\n        usedTypes.push(type);\n      }\n    });\n  }\n\n  return `[ ${output.join(`, `)} ]`;\n};\n\nclass TypeConflictEntry {\n  selector: string;\n  types: Map<string, ITypeConflict>;\n\n  constructor(selector: string) {\n    this.selector = selector;\n    this.types = new Map();\n  }\n\n  addExample({ value, type, parent }: ITypeConflictExample): void {\n    this.types.set(type, {\n      value,\n      description: parent?.internal?.description ?? ``,\n    });\n  }\n\n  printEntry(): void {\n    const sortedByTypeName = sortBy(\n      Array.from(this.types.entries()),\n      ([typeName]) => typeName,\n    );\n\n    report.log(\n      `${this.selector}:${sortedByTypeName\n        .map(\n          ([typeName, { value, description }]) =>\n            `\\n - type: ${typeName}\\n   value: ${formatValue(value)}${\n              description && `\\n   source: ${description}`\n            }`,\n        )\n        .join(``)}`,\n    );\n  }\n}\n\nclass TypeConflictReporter {\n  entries: Map<string, TypeConflictEntry>;\n\n  constructor() {\n    this.entries = new Map();\n  }\n\n  clearConflicts(): void {\n    this.entries.clear();\n  }\n\n  getEntryFromSelector(selector: string): TypeConflictEntry {\n    let dataEntry = this.entries.get(selector);\n\n    if (!dataEntry) {\n      dataEntry = new TypeConflictEntry(selector);\n      this.entries.set(selector, dataEntry);\n    }\n\n    return dataEntry;\n  }\n\n  addConflict(selector: string, examples: Array<ITypeConflictExample>): void {\n    if (selector.substring(0, 11) === `SitePlugin.`) {\n      // Don't store and print out type conflicts in plugins.\n      // This is out of user control so he/she can't do anything\n      // to hide those.\n      return;\n    }\n\n    const entry = this.getEntryFromSelector(selector);\n    examples\n      .filter((example) => example.value != null)\n      .forEach((example) => entry.addExample(example));\n  }\n\n  printConflicts(): void {\n    if (this.entries.size > 0) {\n      report.warn(\n        `There are conflicting field types in your data.\\n\\n` +\n          `If you have explicitly defined a type for those fields, you can ` +\n          `safely ignore this warning message.\\n` +\n          `Otherwise, Gatsby will omit those fields from the GraphQL schema.\\n\\n` +\n          `If you know all field types in advance, the best strategy is to ` +\n          `explicitly define them with the \\`createTypes\\` action, and skip ` +\n          `inference with the \\`@dontInfer\\` directive.\\n` +\n          `See https://www.gatsbyjs.com/docs/actions/#createTypes`,\n      );\n      this.entries.forEach((entry) => entry.printEntry());\n    }\n  }\n\n  getConflicts(): Array<TypeConflictEntry> {\n    return Array.from(this.entries.values());\n  }\n}\n\nexport { TypeConflictReporter, TypeConflictEntry };\n"],"mappings":"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"}