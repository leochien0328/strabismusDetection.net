{"version":3,"file":"type-defs.js","names":["_graphql","require","_typeBuilders","_extensions","_reporter","_interopRequireDefault","isASTDocument","typeOrTypeDef","kind","GraphQLASTNodeKind","DOCUMENT","exports","parseTypeDef","parse","error","reportParsingError","message","source","locations","length","codeFrameColumns","frame","body","start","linesAbove","linesBelow","reporter","panic","typesWithoutInference","typeNames","definitions","forEach","def","directives","directive","name","value","dontInferExtensionName","push","isGatsbyType","config","extensions","inferExtensionName"],"sources":["../../../src/schema/types/type-defs.ts"],"sourcesContent":["import { parse, Kind as GraphQLASTNodeKind } from \"graphql\";\nimport { isGatsbyType } from \"./type-builders\";\nimport { inferExtensionName, dontInferExtensionName } from \"../extensions\";\nimport reporter from \"../../reporter\";\n\nconst isASTDocument = (typeOrTypeDef) =>\n  typeof typeOrTypeDef === `object` &&\n  typeOrTypeDef.kind &&\n  GraphQLASTNodeKind.DOCUMENT === typeOrTypeDef.kind;\n\n/**\n * Parses type definition represented as an SDL string into an AST Document.\n * Type definitions of other formats (other than SDL) are returned as is\n */\nconst parseTypeDef = (typeOrTypeDef) => {\n  if (typeof typeOrTypeDef === `string`) {\n    try {\n      return parse(typeOrTypeDef);\n    } catch (error) {\n      reportParsingError(error);\n    }\n  }\n  return typeOrTypeDef;\n};\n\nconst reportParsingError = (error) => {\n  const { message, source, locations } = error;\n\n  if (source && locations && locations.length) {\n    const { codeFrameColumns } = require(`@babel/code-frame`);\n\n    const frame = codeFrameColumns(\n      source.body,\n      { start: locations[0] },\n      { linesAbove: 5, linesBelow: 5 },\n    );\n    reporter.panic(\n      `Encountered an error parsing the provided GraphQL type definitions:\\n` +\n        message +\n        `\\n\\n` +\n        frame +\n        `\\n`,\n    );\n  } else {\n    throw error;\n  }\n};\n\n/**\n * Given a type definition, collects type names that should skip the inference process\n */\nconst typesWithoutInference = (typeNames = [], typeOrTypeDef) => {\n  if (typeof typeOrTypeDef === `string`) {\n    typeOrTypeDef = parseTypeDef(typeOrTypeDef);\n  }\n  if (isASTDocument(typeOrTypeDef)) {\n    typeOrTypeDef.definitions.forEach((def) => {\n      if (!def.directives) return;\n\n      def.directives.forEach((directive) => {\n        if (directive.name.value === dontInferExtensionName && def.name.value) {\n          // @ts-ignore quick convert from js\n          typeNames.push(def.name.value);\n        }\n      });\n    });\n    return typeNames;\n  }\n  // @ts-ignore quick convert from js\n  if (isGatsbyType(typeOrTypeDef) && typeOrTypeDef.config) {\n    // @ts-ignore quick convert from js\n    const { extensions = {}, name } = typeOrTypeDef.config;\n    if (\n      name &&\n      (extensions[dontInferExtensionName] ||\n        extensions[inferExtensionName] === false)\n    ) {\n      // @ts-ignore quick convert from js\n      typeNames.push(name);\n    }\n  }\n  return typeNames;\n};\n\nexport {\n  parseTypeDef,\n  reportParsingError,\n  typesWithoutInference,\n  isASTDocument,\n};\n"],"mappings":"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"}