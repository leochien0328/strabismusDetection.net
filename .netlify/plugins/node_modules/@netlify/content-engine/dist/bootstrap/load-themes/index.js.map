{"version":3,"file":"index.js","names":["_createRequireFromPath","require","path","_interopRequireWildcard","_mergeGatsbyConfig","_bluebird","_preferDefault","_getConfigFile","_resolvePlugin","_reporter","_interopRequireDefault","_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","obj","__esModule","default","cache","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","resolveTheme","themeSpec","configFileThatDeclaredTheme","isMainConfig","rootDir","themeName","resolve","themeDir","scopedRequire","createRequireFromPath","dirname","e","pathToLocalTheme","join","resolvePlugin","localErr","reporter","panic","nodeResolutionPaths","module","paths","map","p","id","context","configFilePath","configModule","getConfigFile","theme","preferDefault","themeConfig","_isFunction2","options","parentDir","processTheme","themesList","plugins","mapSeries","spec","themeObj","then","arr","_flattenDeep2","concat","Promise","normalizePluginEntry","plugin","loadThemes","config","_config$plugins","themesA","filter","reduce","mergeGatsbyConfig","newConfig","mergedConfig","_uniqWith2","_isEqual2","themes"],"sources":["../../../src/bootstrap/load-themes/index.ts"],"sourcesContent":["import { createRequireFromPath } from \"../../core-utils/create-require-from-path\";\nimport * as path from \"path\";\nimport {\n  IGatsbyConfigInput,\n  mergeGatsbyConfig,\n  PluginEntry,\n  IPluginEntryWithParentDir,\n} from \"../../utils/merge-gatsby-config\";\nimport { mapSeries } from \"bluebird\";\nimport { flattenDeep, isEqual, isFunction, uniqWith } from \"lodash\";\nimport { preferDefault } from \"../prefer-default\";\nimport { getConfigFile } from \"../get-config-file\";\nimport { resolvePlugin } from \"../load-plugins/resolve-plugin\";\nimport reporter from \"../../reporter\";\n\ninterface IThemeObj {\n  themeName: string;\n  themeConfig: IGatsbyConfigInput;\n  themeDir: string;\n  themeSpec: PluginEntry;\n  parentDir: string;\n  configFilePath?: string;\n}\n\n// get the gatsby-config file for a theme\nconst resolveTheme = async (\n  themeSpec: PluginEntry,\n  configFileThatDeclaredTheme: string | undefined,\n  isMainConfig: boolean = false,\n  rootDir: string,\n): Promise<IThemeObj> => {\n  const themeName =\n    typeof themeSpec === `string` ? themeSpec : themeSpec.resolve;\n  let themeDir;\n  try {\n    const scopedRequire = createRequireFromPath(`${rootDir}/:internal:`);\n    // theme is an node-resolvable module\n    themeDir = path.dirname(scopedRequire.resolve(themeName));\n  } catch (e) {\n    let pathToLocalTheme;\n\n    // only try to look for local theme in main site\n    // local themes nested in other themes is potential source of problems:\n    // because those are not hosted by npm, there is potential for multiple\n    // local themes with same name that do different things and name being\n    // main identifier that Gatsby uses right now, it's safer not to support it for now.\n    if (isMainConfig) {\n      pathToLocalTheme = path.join(rootDir, `plugins`, themeName);\n      // is a local plugin OR it doesn't exist\n      try {\n        const { resolve } = resolvePlugin(themeName, rootDir);\n        themeDir = resolve;\n      } catch (localErr) {\n        reporter.panic(`Failed to resolve ${themeName}`, localErr);\n      }\n    }\n\n    if (!themeDir) {\n      const nodeResolutionPaths = module.paths.map((p) =>\n        path.join(p, themeName),\n      );\n      reporter.panic({\n        id: `10226`,\n        context: {\n          themeName,\n          configFilePath: configFileThatDeclaredTheme,\n          pathToLocalTheme,\n          nodeResolutionPaths,\n        },\n      });\n    }\n  }\n\n  const { configModule, configFilePath } = await getConfigFile(\n    themeDir,\n    `gatsby-config`,\n  );\n  const theme:\n    | IGatsbyConfigInput\n    | ((options?: Record<string, unknown>) => IGatsbyConfigInput) =\n    preferDefault(configModule);\n\n  // if theme is a function, call it with the themeConfig\n  const themeConfig = isFunction(theme)\n    ? theme(typeof themeSpec === `string` ? {} : themeSpec.options)\n    : theme;\n\n  return {\n    themeName,\n    themeConfig,\n    themeSpec,\n    themeDir,\n    parentDir: rootDir,\n    configFilePath,\n  };\n};\n\n// single iteration of a recursive function that resolve parent themes\n// It's recursive because we support child themes declaring parents and\n// have to resolve all the way `up the tree` of parent/children relationships\n//\n// Theoretically, there could be an infinite loop here but in practice there is\n// no use case for a loop so I expect that to only happen if someone is very\n// off track and creating their own set of themes\nconst processTheme = (\n  { themeName, themeConfig, themeSpec, themeDir, configFilePath }: IThemeObj,\n  { rootDir }: { rootDir: string },\n): Promise<Array<IThemeObj>> => {\n  const themesList = themeConfig?.plugins;\n\n  // Gatsby themes don't have to specify a gatsby-config.js (they might only use gatsby-node, etc)\n  // in this case they're technically plugins, but we should support it anyway\n  // because we can't guarantee which files theme creators create first\n  if (themeConfig && themesList) {\n    // for every parent theme a theme defines, resolve the parent's\n    // gatsby config and return it in order [parentA, parentB, child]\n    return mapSeries(\n      themesList,\n      async (spec: PluginEntry): Promise<Array<IThemeObj>> => {\n        const themeObj = await resolveTheme(\n          spec,\n          configFilePath,\n          false,\n          themeDir,\n        );\n        return processTheme(themeObj, { rootDir: themeDir });\n      },\n    ).then((arr) =>\n      flattenDeep(\n        arr.concat([\n          { themeName, themeConfig, themeSpec, themeDir, parentDir: rootDir },\n        ]),\n      ),\n    );\n  } else {\n    // if a theme doesn't define additional themes, return the original theme\n    return Promise.resolve([\n      { themeName, themeConfig, themeSpec, themeDir, parentDir: rootDir },\n    ]);\n  }\n};\n\nfunction normalizePluginEntry(\n  plugin: PluginEntry,\n  parentDir: string,\n): IPluginEntryWithParentDir {\n  return {\n    resolve: typeof plugin === `string` ? plugin : plugin.resolve,\n    options: typeof plugin === `string` ? {} : plugin.options || {},\n    parentDir,\n  };\n}\n\nexport async function loadThemes(\n  config: IGatsbyConfigInput,\n  { configFilePath, rootDir }: { configFilePath: string; rootDir: string },\n): Promise<{\n  config: IGatsbyConfigInput;\n  themes: Array<IThemeObj>;\n}> {\n  const themesA = await mapSeries(\n    config.plugins?.filter(\n      (plugin) =>\n        // @ts-ignore\n        plugin?.resolve !== `default-site-plugin` &&\n        plugin !== `default-site-plugin`,\n    ) || [],\n    async (themeSpec: PluginEntry) => {\n      const themeObj = await resolveTheme(\n        themeSpec,\n        configFilePath,\n        true,\n        rootDir,\n      );\n      return processTheme(themeObj, { rootDir });\n    },\n  ).then((arr) => flattenDeep(arr));\n\n  // map over each theme, adding the theme itself to the plugins\n  // list in the config for the theme. This enables the usage of\n  // gatsby-node, etc in themes.\n  return (\n    mapSeries(\n      themesA,\n      ({ themeName, themeConfig = {}, themeSpec, themeDir, parentDir }) => {\n        return {\n          ...themeConfig,\n          plugins: [\n            ...(themeConfig.plugins || []).map((plugin) =>\n              normalizePluginEntry(plugin, themeDir),\n            ),\n            // theme plugin is last so it's gatsby-node, etc can override it's declared plugins, like a normal site.\n            {\n              resolve: themeName,\n              options: typeof themeSpec === `string` ? {} : themeSpec.options,\n              parentDir,\n            },\n          ],\n        };\n      },\n    )\n      /**\n       * themes resolve to a gatsby-config, so here we merge all of the configs\n       * into a single config, making sure to maintain the order in which\n       * they were defined so that later configs, like the user's site and\n       * children, can override functionality in earlier themes.\n       */\n      .reduce(mergeGatsbyConfig, {})\n      .then((newConfig) => {\n        const mergedConfig = mergeGatsbyConfig(newConfig, {\n          ...config,\n          plugins: [\n            ...(config.plugins || []).map((plugin) =>\n              normalizePluginEntry(plugin, rootDir),\n            ),\n          ],\n        });\n\n        mergedConfig.plugins = uniqWith(mergedConfig.plugins, isEqual);\n\n        return {\n          config: mergedConfig,\n          themes: themesA,\n        };\n      })\n  );\n}\n"],"mappings":"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"}