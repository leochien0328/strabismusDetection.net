{"version":3,"file":"schema-hot-reloader.js","names":["_redux","require","_schema","_inferenceMetadata","_reporter","_interopRequireDefault","inferredTypesChanged","typeMap","prevTypeMap","Object","keys","some","type","dirty","haveEqualFields","lastMetadata","maybeRebuildSchema","_debounce2","default","inferenceMetadata","store","getState","activity","report","activityTimer","start","rebuild","parentSpan","end","snapshotInferenceMetadata","_cloneDeep2","bootstrapSchemaHotReloader","emitter","on","startSchemaHotReloader","stopSchemaHotReloader","off","cancel"],"sources":["../../src/bootstrap/schema-hot-reloader.ts"],"sourcesContent":["import { debounce, cloneDeep } from \"lodash\";\nimport { emitter, store } from \"../redux\";\nimport { rebuild } from \"../schema\";\nimport { haveEqualFields } from \"../schema/infer/inference-metadata\";\nimport report from \"../reporter\";\nimport { IGatsbyState } from \"../redux/types\";\n\ntype TypeMap = IGatsbyState[\"inferenceMetadata\"][\"typeMap\"];\ntype InferenceMetadata = IGatsbyState[\"inferenceMetadata\"];\n\nconst inferredTypesChanged = (\n  typeMap: TypeMap,\n  prevTypeMap: TypeMap,\n): boolean =>\n  Object.keys(typeMap).some(\n    (type) =>\n      typeMap[type].dirty && !haveEqualFields(typeMap[type], prevTypeMap[type]),\n  );\n\nlet lastMetadata: InferenceMetadata;\n\n// API_RUNNING_QUEUE_EMPTY could be emitted multiple types\n// in a short period of time, so debounce seems reasonable\nconst maybeRebuildSchema = debounce(async (): Promise<void> => {\n  const { inferenceMetadata } = store.getState();\n\n  if (!inferredTypesChanged(inferenceMetadata.typeMap, lastMetadata.typeMap)) {\n    return;\n  }\n\n  const activity = report.activityTimer(`rebuild schema`);\n  activity.start();\n  await rebuild({ parentSpan: activity });\n  activity.end();\n}, 1000);\n\nfunction snapshotInferenceMetadata(): void {\n  const { inferenceMetadata } = store.getState();\n  lastMetadata = cloneDeep(inferenceMetadata);\n}\n\nexport function bootstrapSchemaHotReloader(): void {\n  // Snapshot inference metadata at the time of the last schema rebuild\n  // (even if schema was rebuilt elsewhere)\n  // Using the snapshot later to check if inferred types actually changed since the last rebuild\n  snapshotInferenceMetadata();\n  emitter.on(`SET_SCHEMA`, snapshotInferenceMetadata);\n\n  startSchemaHotReloader();\n}\n\nexport function startSchemaHotReloader(): void {\n  // Listen for node changes outside of a regular sourceNodes API call,\n  // e.g. markdown file update via watcher\n  emitter.on(`API_RUNNING_QUEUE_EMPTY`, maybeRebuildSchema);\n}\n\nexport function stopSchemaHotReloader(): void {\n  emitter.off(`API_RUNNING_QUEUE_EMPTY`, maybeRebuildSchema);\n  maybeRebuildSchema.cancel();\n}\n"],"mappings":";;;;;;;;;AACA,IAAAA,MAAA,GAAAC,OAAA;AACA,IAAAC,OAAA,GAAAD,OAAA;AACA,IAAAE,kBAAA,GAAAF,OAAA;AACA,IAAAG,SAAA,GAAAC,sBAAA,CAAAJ,OAAA;AAMA,MAAMK,oBAAoB,GAAGA,CAC3BC,OAAgB,EAChBC,WAAoB,KAEpBC,MAAM,CAACC,IAAI,CAACH,OAAO,CAAC,CAACI,IAAI,CACtBC,IAAI,IACHL,OAAO,CAACK,IAAI,CAAC,CAACC,KAAK,IAAI,CAAC,IAAAC,kCAAe,EAACP,OAAO,CAACK,IAAI,CAAC,EAAEJ,WAAW,CAACI,IAAI,CAAC,CAC5E,CAAC;AAEH,IAAIG,YAA+B;;AAEnC;AACA;AACA,MAAMC,kBAAkB,GAAG,IAAAC,UAAA,CAAAC,OAAA,EAAS,YAA2B;EAC7D,MAAM;IAAEC;EAAkB,CAAC,GAAGC,YAAK,CAACC,QAAQ,CAAC,CAAC;EAE9C,IAAI,CAACf,oBAAoB,CAACa,iBAAiB,CAACZ,OAAO,EAAEQ,YAAY,CAACR,OAAO,CAAC,EAAE;IAC1E;EACF;EAEA,MAAMe,QAAQ,GAAGC,iBAAM,CAACC,aAAa,CAAE,gBAAe,CAAC;EACvDF,QAAQ,CAACG,KAAK,CAAC,CAAC;EAChB,MAAM,IAAAC,eAAO,EAAC;IAAEC,UAAU,EAAEL;EAAS,CAAC,CAAC;EACvCA,QAAQ,CAACM,GAAG,CAAC,CAAC;AAChB,CAAC,EAAE,IAAI,CAAC;AAER,SAASC,yBAAyBA,CAAA,EAAS;EACzC,MAAM;IAAEV;EAAkB,CAAC,GAAGC,YAAK,CAACC,QAAQ,CAAC,CAAC;EAC9CN,YAAY,GAAG,IAAAe,WAAA,CAAAZ,OAAA,EAAUC,iBAAiB,CAAC;AAC7C;AAEO,SAASY,0BAA0BA,CAAA,EAAS;EACjD;EACA;EACA;EACAF,yBAAyB,CAAC,CAAC;EAC3BG,cAAO,CAACC,EAAE,CAAE,YAAW,EAAEJ,yBAAyB,CAAC;EAEnDK,sBAAsB,CAAC,CAAC;AAC1B;AAEO,SAASA,sBAAsBA,CAAA,EAAS;EAC7C;EACA;EACAF,cAAO,CAACC,EAAE,CAAE,yBAAwB,EAAEjB,kBAAkB,CAAC;AAC3D;AAEO,SAASmB,qBAAqBA,CAAA,EAAS;EAC5CH,cAAO,CAACI,GAAG,CAAE,yBAAwB,EAAEpB,kBAAkB,CAAC;EAC1DA,kBAAkB,CAACqB,MAAM,CAAC,CAAC;AAC7B"}