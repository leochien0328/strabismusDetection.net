{"version":3,"file":"types.js","names":["MESSAGE_TYPES","exports","WorkerError","Error","constructor","error","_error$message","message","JSON","stringify","name","captureStackTrace","stack"],"sources":["../../../src/utils/jobs/types.ts"],"sourcesContent":["interface IBaseJob {\n  name: string;\n  outputDir: string;\n  args: Record<string, any>;\n}\n\ninterface IJobInput {\n  inputPaths: Array<string>;\n  plugin: {\n    name: string;\n    version: string;\n    resolve: string;\n  };\n}\n\ninterface IInternalJob {\n  id: string;\n  contentDigest: string;\n  inputPaths: Array<{\n    path: string;\n    contentDigest: string;\n  }>;\n  plugin: {\n    name: string;\n    version: string;\n    resolve: string;\n    isLocal: boolean;\n  };\n}\n\nexport type JobInput = IBaseJob & IJobInput;\nexport type InternalJob = IBaseJob & IInternalJob;\n\nexport enum MESSAGE_TYPES {\n  JOB_CREATED = `JOB_CREATED`,\n  JOB_COMPLETED = `JOB_COMPLETED`,\n  JOB_FAILED = `JOB_FAILED`,\n  JOB_NOT_WHITELISTED = `JOB_NOT_WHITELISTED`,\n}\n\nexport interface IJobCreatedMessage {\n  type: MESSAGE_TYPES.JOB_CREATED;\n  payload: InternalJob;\n}\n\nexport interface IJobCompletedMessage {\n  type: MESSAGE_TYPES.JOB_COMPLETED;\n  payload: {\n    id: InternalJob[\"id\"];\n    result: Record<string, unknown>;\n  };\n}\n\nexport interface IJobFailed {\n  type: MESSAGE_TYPES.JOB_FAILED;\n  payload: {\n    id: InternalJob[\"id\"];\n    error: Error;\n  };\n}\n\nexport interface IJobNotWhitelisted {\n  type: MESSAGE_TYPES.JOB_NOT_WHITELISTED;\n  payload: {\n    id: InternalJob[\"id\"];\n  };\n}\n\nexport class WorkerError extends Error {\n  constructor(error: Error | string) {\n    if (typeof error === `string`) {\n      super(error);\n    } else {\n      // use error.message or else stringiyf the object so we don't get [Object object]\n      super(error.message ?? JSON.stringify(error));\n    }\n\n    this.name = `WorkerError`;\n\n    if (typeof error === `string`) {\n      Error.captureStackTrace(this, WorkerError);\n    } else {\n      // inherit stack from original error so actual stack trace persist\n      this.stack = error.stack;\n    }\n  }\n}\n"],"mappings":";;;;IAiCYA,aAAa,GAAAC,OAAA,CAAAD,aAAA,0BAAbA,aAAa;EAAbA,aAAa;EAAbA,aAAa;EAAbA,aAAa;EAAbA,aAAa;EAAA,OAAbA,aAAa;AAAA;AAmClB,MAAME,WAAW,SAASC,KAAK,CAAC;EACrCC,WAAWA,CAACC,KAAqB,EAAE;IACjC,IAAI,OAAOA,KAAK,KAAM,QAAO,EAAE;MAC7B,KAAK,CAACA,KAAK,CAAC;IACd,CAAC,MAAM;MAAA,IAAAC,cAAA;MACL;MACA,KAAK,EAAAA,cAAA,GAACD,KAAK,CAACE,OAAO,cAAAD,cAAA,cAAAA,cAAA,GAAIE,IAAI,CAACC,SAAS,CAACJ,KAAK,CAAC,CAAC;IAC/C;IAEA,IAAI,CAACK,IAAI,GAAI,aAAY;IAEzB,IAAI,OAAOL,KAAK,KAAM,QAAO,EAAE;MAC7BF,KAAK,CAACQ,iBAAiB,CAAC,IAAI,EAAET,WAAW,CAAC;IAC5C,CAAC,MAAM;MACL;MACA,IAAI,CAACU,KAAK,GAAGP,KAAK,CAACO,KAAK;IAC1B;EACF;AACF;AAACX,OAAA,CAAAC,WAAA,GAAAA,WAAA"}