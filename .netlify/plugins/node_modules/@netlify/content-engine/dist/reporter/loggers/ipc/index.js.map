{"version":3,"file":"index.js","names":["_index","require","_constants","_stripAnsi","_interopRequireDefault","isStringPayload","action","payload","sanitizeAction","copiedAction","_cloneDeep2","default","text","stripAnsi","statusText","initializeIPCLogger","onLogAction","process","send","sanitizedAction","type","Actions","Log","LogLevels","Debug","includes","level","Success","Info","LogAction","exports"],"sources":["../../../../src/reporter/loggers/ipc/index.ts"],"sourcesContent":["import { onLogAction } from \"../../redux/index\";\nimport { ISetStatus, ActionsUnion } from \"../../redux/types\";\nimport { Actions, LogLevels } from \"../../constants\";\nimport stripAnsi from \"strip-ansi\";\nimport { cloneDeep } from \"lodash\";\n\nconst isStringPayload = (action: ActionsUnion): action is ISetStatus =>\n  typeof action.payload === `string`;\n\n/**\n * Payload can either be a String or an Object\n * See more at integration-tests/structured-logging/__tests__/to-do.js\n */\nconst sanitizeAction = (action: ActionsUnion): ActionsUnion => {\n  const copiedAction = cloneDeep(action);\n\n  if (isStringPayload(copiedAction)) {\n    return copiedAction;\n  }\n\n  if (`text` in copiedAction.payload && copiedAction.payload.text) {\n    copiedAction.payload.text = stripAnsi(copiedAction.payload.text);\n  }\n  if (`statusText` in copiedAction.payload && copiedAction.payload.statusText) {\n    copiedAction.payload.statusText = stripAnsi(\n      copiedAction.payload.statusText,\n    );\n  }\n\n  return copiedAction;\n};\n\nexport const initializeIPCLogger = (): void => {\n  onLogAction((action: ActionsUnion) => {\n    if (!process.send) return;\n\n    const sanitizedAction = sanitizeAction(action);\n\n    // we mutate sanitizedAction but this is already deep copy of action so we should be good\n    if (sanitizedAction.type === Actions.Log) {\n      // Don't emit Debug over IPC\n      if (\n        [LogLevels.Debug].includes(sanitizedAction.payload.level as LogLevels)\n      ) {\n        return;\n      }\n      // Override Success and Log types to Info over IPC\n      if (\n        [LogLevels.Success, LogLevels.Log].includes(\n          sanitizedAction.payload.level as LogLevels,\n        )\n      ) {\n        sanitizedAction.payload.level = LogLevels.Info;\n      }\n    }\n\n    process.send({\n      type: Actions.LogAction,\n      action: sanitizedAction,\n    });\n  });\n};\n"],"mappings":";;;;;;AAAA,IAAAA,MAAA,GAAAC,OAAA;AAEA,IAAAC,UAAA,GAAAD,OAAA;AACA,IAAAE,UAAA,GAAAC,sBAAA,CAAAH,OAAA;AAGA,MAAMI,eAAe,GAAIC,MAAoB,IAC3C,OAAOA,MAAM,CAACC,OAAO,KAAM,QAAO;;AAEpC;AACA;AACA;AACA;AACA,MAAMC,cAAc,GAAIF,MAAoB,IAAmB;EAC7D,MAAMG,YAAY,GAAG,IAAAC,WAAA,CAAAC,OAAA,EAAUL,MAAM,CAAC;EAEtC,IAAID,eAAe,CAACI,YAAY,CAAC,EAAE;IACjC,OAAOA,YAAY;EACrB;EAEA,IAAK,MAAK,IAAIA,YAAY,CAACF,OAAO,IAAIE,YAAY,CAACF,OAAO,CAACK,IAAI,EAAE;IAC/DH,YAAY,CAACF,OAAO,CAACK,IAAI,GAAG,IAAAC,kBAAS,EAACJ,YAAY,CAACF,OAAO,CAACK,IAAI,CAAC;EAClE;EACA,IAAK,YAAW,IAAIH,YAAY,CAACF,OAAO,IAAIE,YAAY,CAACF,OAAO,CAACO,UAAU,EAAE;IAC3EL,YAAY,CAACF,OAAO,CAACO,UAAU,GAAG,IAAAD,kBAAS,EACzCJ,YAAY,CAACF,OAAO,CAACO,UACvB,CAAC;EACH;EAEA,OAAOL,YAAY;AACrB,CAAC;AAEM,MAAMM,mBAAmB,GAAGA,CAAA,KAAY;EAC7C,IAAAC,kBAAW,EAAEV,MAAoB,IAAK;IACpC,IAAI,CAACW,OAAO,CAACC,IAAI,EAAE;IAEnB,MAAMC,eAAe,GAAGX,cAAc,CAACF,MAAM,CAAC;;IAE9C;IACA,IAAIa,eAAe,CAACC,IAAI,KAAKC,kBAAO,CAACC,GAAG,EAAE;MACxC;MACA,IACE,CAACC,oBAAS,CAACC,KAAK,CAAC,CAACC,QAAQ,CAACN,eAAe,CAACZ,OAAO,CAACmB,KAAkB,CAAC,EACtE;QACA;MACF;MACA;MACA,IACE,CAACH,oBAAS,CAACI,OAAO,EAAEJ,oBAAS,CAACD,GAAG,CAAC,CAACG,QAAQ,CACzCN,eAAe,CAACZ,OAAO,CAACmB,KAC1B,CAAC,EACD;QACAP,eAAe,CAACZ,OAAO,CAACmB,KAAK,GAAGH,oBAAS,CAACK,IAAI;MAChD;IACF;IAEAX,OAAO,CAACC,IAAI,CAAC;MACXE,IAAI,EAAEC,kBAAO,CAACQ,SAAS;MACvBvB,MAAM,EAAEa;IACV,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ,CAAC;AAACW,OAAA,CAAAf,mBAAA,GAAAA,mBAAA"}