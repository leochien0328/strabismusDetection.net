{"version":3,"file":"index.js","names":["_redux","require","_mett","_reduxThunk","_interopRequireDefault","reducers","_interopRequireWildcard","_persist","_createRequireFromPath","_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","obj","__esModule","default","cache","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","gatsbyRedux","requireFromInstalledGatsbyDist","emitter","exports","mett","readState","state","readFromCache","nodes","nodesByType","Map","forEach","node","type","internal","id","e","multi","dispatch","next","action","Array","isArray","filter","Boolean","map","configureStore","initialState","createStore","combineReducers","applyMiddleware","thunk","store","process","env","GATSBY_WORKER_POOL_WORKER","replaceReducer","customReducers","saveState","getState","writeToCache","typeOwners","statefulSourcePlugins","status","jobsV2","savePartialStateToDisk","keys","transformState","contents","_pick2","savedContents","loadPartialStateFromDisk","subscribe","lastAction","emit"],"sources":["../../src/redux/index.ts"],"sourcesContent":["import {\n  applyMiddleware,\n  combineReducers,\n  createStore,\n  DeepPartial,\n  Middleware,\n  ReducersMapObject,\n  Store,\n} from \"redux\";\nimport _ from \"lodash\";\n// import telemetry from \"gatsby-telemetry\"\n\nimport { mett } from \"../utils/mett\";\nimport thunk, {\n  ThunkMiddleware,\n  ThunkAction,\n  ThunkDispatch,\n} from \"redux-thunk\";\nimport * as reducers from \"./reducers\";\nimport { writeToCache, readFromCache } from \"./persist\";\nimport { IGatsbyState, ActionsUnion, GatsbyStateKeys } from \"./types\";\nimport { requireFromInstalledGatsbyDist } from \"../core-utils/create-require-from-path\";\n\nconst gatsbyRedux = requireFromInstalledGatsbyDist(`redux/index.js`);\n\n// Create event emitter for actions\nexport const emitter = gatsbyRedux?.emitter || mett();\n\n// Read old node data from cache.\nexport const readState =\n  gatsbyRedux?.readState ||\n  ((): IGatsbyState => {\n    try {\n      const state = readFromCache() as IGatsbyState;\n      if (state.nodes) {\n        // re-create nodesByType\n        state.nodesByType = new Map();\n        state.nodes.forEach((node) => {\n          const { type } = node.internal;\n          if (!state.nodesByType.has(type)) {\n            state.nodesByType.set(type, new Map());\n          }\n          // The `.has` and `.set` calls above make this safe\n          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n          state.nodesByType.get(type)!.set(node.id, node);\n        });\n      }\n\n      // jsonDataPaths was removed in the per-page-manifest\n      // changes. Explicitly delete it here to cover case where user\n      // runs gatsby the first time after upgrading.\n      delete state[`jsonDataPaths`];\n\n      // telemetry.trackCli(`CACHE_STATUS`, {\n      //   cacheStatus: `WARM`,\n      // })\n\n      return state;\n    } catch (e) {\n      // telemetry.trackCli(`CACHE_STATUS`, {\n      //   cacheStatus: `COLD`,\n      // })\n\n      return {} as IGatsbyState;\n    }\n  });\n\nexport interface IMultiDispatch {\n  <T extends ActionsUnion | ThunkAction<any, IGatsbyState, any, ActionsUnion>>(\n    action: Array<T>,\n  ): Array<T>;\n}\n\n/**\n * Redux middleware handling array of actions\n */\nconst multi: Middleware<IMultiDispatch> =\n  ({ dispatch }) =>\n  (next) =>\n  (action: ActionsUnion): ActionsUnion | Array<ActionsUnion> =>\n    Array.isArray(action) ? action.filter(Boolean).map(dispatch) : next(action);\n\nexport type GatsbyReduxStore = Store<IGatsbyState> & {\n  dispatch: ThunkDispatch<IGatsbyState, any, ActionsUnion> & IMultiDispatch;\n};\n\nexport const configureStore =\n  gatsbyRedux?.configureStore ||\n  ((initialState: IGatsbyState): GatsbyReduxStore =>\n    createStore(\n      combineReducers<IGatsbyState>({ ...reducers }),\n      initialState,\n      applyMiddleware(\n        thunk as ThunkMiddleware<IGatsbyState, ActionsUnion>,\n        multi,\n      ),\n    ));\n\nexport const store: GatsbyReduxStore =\n  gatsbyRedux?.store ||\n  configureStore(\n    process.env.GATSBY_WORKER_POOL_WORKER ? ({} as IGatsbyState) : readState(),\n  );\n\n/**\n * Allows overloading some reducers (e.g. when setting a custom datastore)\n */\nexport const replaceReducer =\n  gatsbyRedux?.replaceReducer ||\n  ((customReducers: Partial<ReducersMapObject<IGatsbyState>>): void => {\n    store.replaceReducer(\n      combineReducers<IGatsbyState>({ ...reducers, ...customReducers }),\n    );\n  });\n\n// Persist state.\nexport const saveState =\n  gatsbyRedux?.saveState ||\n  ((): void => {\n    const state = store.getState();\n\n    return writeToCache({\n      nodes: state.nodes,\n      typeOwners: state.typeOwners,\n      statefulSourcePlugins: state.statefulSourcePlugins,\n      status: state.status,\n      jobsV2: state.jobsV2,\n    });\n  });\n\nexport const savePartialStateToDisk =\n  gatsbyRedux?.savePartialStateToDisk ||\n  ((\n    keys: Array<GatsbyStateKeys>,\n    transformState?: <T extends DeepPartial<IGatsbyState>>(state: T) => T,\n  ): void => {\n    const state = store.getState();\n    const contents = _.pick(state, keys);\n    const savedContents = transformState ? transformState(contents) : contents;\n\n    return writeToCache(savedContents);\n  });\n\nexport const loadPartialStateFromDisk =\n  gatsbyRedux?.loadPartialStateFromDisk ||\n  ((): DeepPartial<IGatsbyState> => {\n    try {\n      return readFromCache() as DeepPartial<IGatsbyState>;\n    } catch (e) {\n      // ignore errors.\n    }\n    return {} as IGatsbyState;\n  });\n\n// if we're using Gatsby's redux then it will already be emitting the following:\nif (!gatsbyRedux?.emitter) {\n  store.subscribe(() => {\n    const lastAction = store.getState().lastAction;\n    emitter.emit(lastAction.type, lastAction);\n  });\n}\n"],"mappings":";;;;;;AAAA,IAAAA,MAAA,GAAAC,OAAA;AAYA,IAAAC,KAAA,GAAAD,OAAA;AACA,IAAAE,WAAA,GAAAC,sBAAA,CAAAH,OAAA;AAKA,IAAAI,QAAA,GAAAC,uBAAA,CAAAL,OAAA;AACA,IAAAM,QAAA,GAAAN,OAAA;AAEA,IAAAO,sBAAA,GAAAP,OAAA;AAAwF,SAAAQ,yBAAAC,WAAA,eAAAC,OAAA,kCAAAC,iBAAA,OAAAD,OAAA,QAAAE,gBAAA,OAAAF,OAAA,YAAAF,wBAAA,YAAAA,CAAAC,WAAA,WAAAA,WAAA,GAAAG,gBAAA,GAAAD,iBAAA,KAAAF,WAAA;AAAA,SAAAJ,wBAAAQ,GAAA,EAAAJ,WAAA,SAAAA,WAAA,IAAAI,GAAA,IAAAA,GAAA,CAAAC,UAAA,WAAAD,GAAA,QAAAA,GAAA,oBAAAA,GAAA,wBAAAA,GAAA,4BAAAE,OAAA,EAAAF,GAAA,UAAAG,KAAA,GAAAR,wBAAA,CAAAC,WAAA,OAAAO,KAAA,IAAAA,KAAA,CAAAC,GAAA,CAAAJ,GAAA,YAAAG,KAAA,CAAAE,GAAA,CAAAL,GAAA,SAAAM,MAAA,WAAAC,qBAAA,GAAAC,MAAA,CAAAC,cAAA,IAAAD,MAAA,CAAAE,wBAAA,WAAAC,GAAA,IAAAX,GAAA,QAAAW,GAAA,kBAAAH,MAAA,CAAAI,SAAA,CAAAC,cAAA,CAAAC,IAAA,CAAAd,GAAA,EAAAW,GAAA,SAAAI,IAAA,GAAAR,qBAAA,GAAAC,MAAA,CAAAE,wBAAA,CAAAV,GAAA,EAAAW,GAAA,cAAAI,IAAA,KAAAA,IAAA,CAAAV,GAAA,IAAAU,IAAA,CAAAC,GAAA,KAAAR,MAAA,CAAAC,cAAA,CAAAH,MAAA,EAAAK,GAAA,EAAAI,IAAA,YAAAT,MAAA,CAAAK,GAAA,IAAAX,GAAA,CAAAW,GAAA,SAAAL,MAAA,CAAAJ,OAAA,GAAAF,GAAA,MAAAG,KAAA,IAAAA,KAAA,CAAAa,GAAA,CAAAhB,GAAA,EAAAM,MAAA,YAAAA,MAAA;AAXxF;;AAaA,MAAMW,WAAW,GAAG,IAAAC,qDAA8B,EAAE,gBAAe,CAAC;;AAEpE;AACO,MAAMC,OAAO,GAAAC,OAAA,CAAAD,OAAA,GAAG,CAAAF,WAAW,aAAXA,WAAW,uBAAXA,WAAW,CAAEE,OAAO,KAAI,IAAAE,UAAI,EAAC,CAAC;;AAErD;AACO,MAAMC,SAAS,GAAAF,OAAA,CAAAE,SAAA,GACpB,CAAAL,WAAW,aAAXA,WAAW,uBAAXA,WAAW,CAAEK,SAAS,MACrB,MAAoB;EACnB,IAAI;IACF,MAAMC,KAAK,GAAG,IAAAC,sBAAa,EAAC,CAAiB;IAC7C,IAAID,KAAK,CAACE,KAAK,EAAE;MACf;MACAF,KAAK,CAACG,WAAW,GAAG,IAAIC,GAAG,CAAC,CAAC;MAC7BJ,KAAK,CAACE,KAAK,CAACG,OAAO,CAAEC,IAAI,IAAK;QAC5B,MAAM;UAAEC;QAAK,CAAC,GAAGD,IAAI,CAACE,QAAQ;QAC9B,IAAI,CAACR,KAAK,CAACG,WAAW,CAACtB,GAAG,CAAC0B,IAAI,CAAC,EAAE;UAChCP,KAAK,CAACG,WAAW,CAACV,GAAG,CAACc,IAAI,EAAE,IAAIH,GAAG,CAAC,CAAC,CAAC;QACxC;QACA;QACA;QACAJ,KAAK,CAACG,WAAW,CAACrB,GAAG,CAACyB,IAAI,CAAC,CAAEd,GAAG,CAACa,IAAI,CAACG,EAAE,EAAEH,IAAI,CAAC;MACjD,CAAC,CAAC;IACJ;;IAEA;IACA;IACA;IACA,OAAON,KAAK,CAAE,eAAc,CAAC;;IAE7B;IACA;IACA;;IAEA,OAAOA,KAAK;EACd,CAAC,CAAC,OAAOU,CAAC,EAAE;IACV;IACA;IACA;;IAEA,OAAO,CAAC,CAAC;EACX;AACF,CAAC,CAAC;AAQJ;AACA;AACA;AACA,MAAMC,KAAiC,GACrCA,CAAC;EAAEC;AAAS,CAAC,KACZC,IAAI,IACJC,MAAoB,IACnBC,KAAK,CAACC,OAAO,CAACF,MAAM,CAAC,GAAGA,MAAM,CAACG,MAAM,CAACC,OAAO,CAAC,CAACC,GAAG,CAACP,QAAQ,CAAC,GAAGC,IAAI,CAACC,MAAM,CAAC;AAMxE,MAAMM,cAAc,GAAAvB,OAAA,CAAAuB,cAAA,GACzB,CAAA1B,WAAW,aAAXA,WAAW,uBAAXA,WAAW,CAAE0B,cAAc,MACzBC,YAA0B,IAC1B,IAAAC,kBAAW,EACT,IAAAC,sBAAe,EAAe;EAAE,GAAGvD;AAAS,CAAC,CAAC,EAC9CqD,YAAY,EACZ,IAAAG,sBAAe,EACbC,mBAAK,EACLd,KACF,CACF,CAAC,CAAC;AAEC,MAAMe,KAAuB,GAAA7B,OAAA,CAAA6B,KAAA,GAClC,CAAAhC,WAAW,aAAXA,WAAW,uBAAXA,WAAW,CAAEgC,KAAK,KAClBN,cAAc,CACZO,OAAO,CAACC,GAAG,CAACC,yBAAyB,GAAI,CAAC,CAAC,GAAoB9B,SAAS,CAAC,CAC3E,CAAC;;AAEH;AACA;AACA;AACO,MAAM+B,cAAc,GAAAjC,OAAA,CAAAiC,cAAA,GACzB,CAAApC,WAAW,aAAXA,WAAW,uBAAXA,WAAW,CAAEoC,cAAc,MACzBC,cAAwD,IAAW;EACnEL,KAAK,CAACI,cAAc,CAClB,IAAAP,sBAAe,EAAe;IAAE,GAAGvD,QAAQ;IAAE,GAAG+D;EAAe,CAAC,CAClE,CAAC;AACH,CAAC,CAAC;;AAEJ;AACO,MAAMC,SAAS,GAAAnC,OAAA,CAAAmC,SAAA,GACpB,CAAAtC,WAAW,aAAXA,WAAW,uBAAXA,WAAW,CAAEsC,SAAS,MACrB,MAAY;EACX,MAAMhC,KAAK,GAAG0B,KAAK,CAACO,QAAQ,CAAC,CAAC;EAE9B,OAAO,IAAAC,qBAAY,EAAC;IAClBhC,KAAK,EAAEF,KAAK,CAACE,KAAK;IAClBiC,UAAU,EAAEnC,KAAK,CAACmC,UAAU;IAC5BC,qBAAqB,EAAEpC,KAAK,CAACoC,qBAAqB;IAClDC,MAAM,EAAErC,KAAK,CAACqC,MAAM;IACpBC,MAAM,EAAEtC,KAAK,CAACsC;EAChB,CAAC,CAAC;AACJ,CAAC,CAAC;AAEG,MAAMC,sBAAsB,GAAA1C,OAAA,CAAA0C,sBAAA,GACjC,CAAA7C,WAAW,aAAXA,WAAW,uBAAXA,WAAW,CAAE6C,sBAAsB,MAClC,CACCC,IAA4B,EAC5BC,cAAqE,KAC5D;EACT,MAAMzC,KAAK,GAAG0B,KAAK,CAACO,QAAQ,CAAC,CAAC;EAC9B,MAAMS,QAAQ,GAAG,IAAAC,MAAA,CAAAhE,OAAA,EAAOqB,KAAK,EAAEwC,IAAI,CAAC;EACpC,MAAMI,aAAa,GAAGH,cAAc,GAAGA,cAAc,CAACC,QAAQ,CAAC,GAAGA,QAAQ;EAE1E,OAAO,IAAAR,qBAAY,EAACU,aAAa,CAAC;AACpC,CAAC,CAAC;AAEG,MAAMC,wBAAwB,GAAAhD,OAAA,CAAAgD,wBAAA,GACnC,CAAAnD,WAAW,aAAXA,WAAW,uBAAXA,WAAW,CAAEmD,wBAAwB,MACpC,MAAiC;EAChC,IAAI;IACF,OAAO,IAAA5C,sBAAa,EAAC,CAAC;EACxB,CAAC,CAAC,OAAOS,CAAC,EAAE;IACV;EAAA;EAEF,OAAO,CAAC,CAAC;AACX,CAAC,CAAC;;AAEJ;AACA,IAAI,EAAChB,WAAW,aAAXA,WAAW,eAAXA,WAAW,CAAEE,OAAO,GAAE;EACzB8B,KAAK,CAACoB,SAAS,CAAC,MAAM;IACpB,MAAMC,UAAU,GAAGrB,KAAK,CAACO,QAAQ,CAAC,CAAC,CAACc,UAAU;IAC9CnD,OAAO,CAACoD,IAAI,CAACD,UAAU,CAACxC,IAAI,EAAEwC,UAAU,CAAC;EAC3C,CAAC,CAAC;AACJ"}