{"version":3,"file":"index.js","names":["_inspector","_interopRequireDefault","require","_signalExit","_reporter","_controllableScript","_crypto","_fsExtra","_path","_createRequireFromPath","_lmdbDatastore","_types","Object","keys","forEach","key","prototype","hasOwnProperty","call","_exportNames","exports","_index","setFrameworkHook","contentEngine","engineOptions","_engineOptions2","directory","frameworkHooks","existsSync","Error","process","cwd","runInSubProcess","_engineOptions","chdir","defaultContentEnginePath","contentEngineDir","resolveFromContentEngine","state","exited","internalState","env","processListenersWereSet","stdErrListeners","stdOutListeners","messageListeners","log","message","_engineOptions3","printLogs","console","onceReceived","Promise","res","subprocess","subProcess","exitListener","listener","receivedMessage","type","offMessage","offExit","payload","onMessage","onExit","createSubProcessIfNoneExists","_engineOptions4","_engineOptions5","_engineOptions6","_engineOptions7","_stdout","_stderr","exitCode","undefined","reporter","verbose","resolve","reduxDir","ControllableScript","JSON","stringify","start","stdout","on","data","stderr","_internalState$subPro","proc","killed","error","shutdownService","code","signal","stop","catch","then","msg","_internalState$subPro2","send","exit","isRunning","sendFrameworkContext","context","initialize","clearCache","_engineOptions8","deleteCache","result","newErr","stack","cachePath","path","join","rm","recursive","force","getStore","resetCache","sync","runServer","webhookBody","buildSchema","connector","_engineOptions9","restart","options","inDebugMode","inspector","url","exitSignal","deferTestUtilToSubProcess","utilName","args","messageId","crypto","randomUUID","startsWith","replace","_engineOptions10","store","getLmdbStore","dbPath","getDefaultDbPath","engineApi","config","newConfig","normConfig","info","newEngine","test","throwOutsideTestEnv","getNodes","getNodesByType","getNode","query","id","getTypes","countNodes","iterateNodes","iterateNodesByType","runQuery","GATSBY_EXPERIMENTAL_LMDB_INDEXES","getProcess","onStdOut","callback","push","onStdErr","sendMessage","clearListeners","fns","fromEntries","entries","map","name","fn","NODE_ENV"],"sources":["../src/index.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-non-null-assertion */\nimport inspector from \"inspector\";\nimport { IGatsbyNode } from \"./redux/types\";\nimport onExit from \"signal-exit\";\nimport { ChildProcess } from \"child_process\";\nimport reporter from \"./reporter\";\nimport { GatsbyConfig } from \"./types\";\nimport { ControllableScript } from \"./utils/controllable-script\";\nimport crypto from \"crypto\";\nimport { ExecutionResult } from \"graphql\";\nimport { existsSync, rm } from \"fs-extra\";\nimport path from \"path\";\nimport { FrameworkContext } from \"./framework-hooks/index\";\nimport { resolveFromContentEngine } from \"./core-utils/create-require-from-path\";\nimport { IDataStore } from \"./datastore/types\";\nimport {\n  getDefaultDbPath,\n  getLmdbStore,\n} from \"./datastore/lmdb/lmdb-datastore\";\n\nexport * from \"./types\";\nexport { setFrameworkHook } from \"./framework-hooks/index\";\n\nexport interface ContentEngineConfiguration {\n  directory?: string;\n  verbose?: boolean;\n  openTracingConfigFile?: string;\n  host?: string;\n  port?: number | string;\n  engineConfig?: GatsbyConfig;\n  env?: Record<string, string>;\n  frameworkHooks?: string;\n  printLogs?: false;\n\n  // default is true\n  runInSubProcess?: boolean;\n}\n\ntype InitializeOptions = {\n  clearCache?: boolean;\n  context?: Record<string, unknown>;\n} & Pick<ContentEngineConfiguration, \"env\">;\n\ntype SyncOptions = InitializeOptions & {\n  runServer?: boolean;\n  webhookBody?: { [key: string]: any };\n  connector?: string;\n\n  buildSchema?: true | boolean;\n};\n\nexport interface SyncState {\n  exitCode?: number;\n  exited?: boolean;\n  error?: {\n    message: string;\n    stack: string;\n  };\n}\n\nexport interface DataStore\n  extends Pick<IDataStore, \"getNode\" | \"getTypes\" | \"countNodes\" | \"runQuery\"> {\n  getNodes: IDataStore[\"iterateNodes\"];\n  getNodesByType: IDataStore[\"iterateNodesByType\"];\n}\nexport interface ContentEngine {\n  sync: (options?: SyncOptions) => Promise<SyncState>;\n  initialize: (options?: InitializeOptions) => Promise<void>;\n  restart: (options?: SyncOptions) => Promise<SyncState>;\n  stop: () => Promise<void>;\n  config: (\n    config: ContentEngineConfiguration,\n  ) => Promise<ContentEnginePublicAPI>;\n  onStdOut: (callback: (data: string) => void) => void;\n  onStdErr: (callback: (data: string) => void) => void;\n  onMessage: (callback: (message: any) => void) => void;\n  sendMessage: (message: any) => void;\n  clearListeners: () => void;\n  /**\n   * Test utils, only available when process.env.NODE_ENV === `test`\n   */\n  test: {\n    query: <TData>(\n      query: string,\n      variables?: Record<string, unknown>,\n    ) => Promise<ExecutionResult<TData>>;\n    getNodes: <NodeFields>() => Promise<Array<IGatsbyNode & NodeFields>>;\n    getNode: <NodeFields>(id: string) => Promise<IGatsbyNode & NodeFields>;\n    getNodesByType: <NodeFields>(\n      type: string,\n    ) => Promise<Array<IGatsbyNode & NodeFields>>;\n  };\n  store?: DataStore;\n  getProcess: () => ChildProcess;\n}\n\nexport type ContentEnginePublicAPI = ContentEngine;\n\nexport const contentEngine = (\n  engineOptions?: ContentEngineConfiguration,\n): ContentEnginePublicAPI => {\n  const { directory, frameworkHooks } = engineOptions || {};\n\n  if (directory && !existsSync(directory)) {\n    throw new Error(`Content Engine directory does not exist: ${directory}`);\n  }\n\n  if (frameworkHooks && typeof frameworkHooks !== `string`) {\n    throw new Error(\n      `The framework file passed to contentEngine({ frameworkHooks: \"...\" }) must be a string.`,\n    );\n  }\n\n  if (frameworkHooks && !existsSync(frameworkHooks)) {\n    throw new Error(\n      `The framework file passed to contentEngine({ frameworkHooks: \"${frameworkHooks}\" }) does not exist. Make sure the path to the framework file is correct.`,\n    );\n  }\n\n  engineOptions = {\n    directory: process.cwd(),\n    ...(engineOptions || {}),\n  };\n\n  if (\n    `runInSubProcess` in engineOptions &&\n    engineOptions.runInSubProcess === false\n  ) {\n    process.chdir(engineOptions.directory!);\n    const defaultContentEnginePath = `@netlify/content-engine/dist/services/content-engine.js`;\n    const contentEngineDir =\n      resolveFromContentEngine(\n        `/services/content-engine`,\n        engineOptions?.directory,\n      ) || defaultContentEnginePath;\n\n    if (\n      !contentEngineDir ||\n      (contentEngineDir &&\n        contentEngineDir !== defaultContentEnginePath &&\n        !existsSync(contentEngineDir))\n    ) {\n      throw new Error(\n        `Content Engine directory does not exist: ${contentEngineDir}`,\n      );\n    }\n\n    const { contentEngine } = require(contentEngineDir);\n\n    return contentEngine(engineOptions);\n  }\n\n  const state: SyncState = {\n    exited: false,\n  };\n  const internalState: {\n    subProcess?: ControllableScript;\n    env: ContentEngineConfiguration[\"env\"];\n    processListenersWereSet: boolean;\n    stdErrListeners: Array<(data: string) => void>;\n    stdOutListeners: Array<(data: string) => void>;\n    messageListeners: Array<(message: any) => void>;\n    store?: IDataStore;\n  } = {\n    env: engineOptions?.env || {},\n    processListenersWereSet: false,\n    stdErrListeners: [],\n    stdOutListeners: [],\n    messageListeners: [],\n  };\n\n  const log = (message: string) => {\n    if (engineOptions?.printLogs !== false) {\n      console.log(message);\n    }\n  };\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  function onceReceived(message: string): Promise<any> {\n    return new Promise((res) => {\n      const subprocess = internalState.subProcess as ControllableScript;\n\n      if (!subprocess) {\n        new Error(`Content Engine process is not running but should be.`);\n      }\n\n      const exitListener = () => {\n        // @ts-ignore if subProcess is accessed from outside it will be recreated automatically. setting it to null here allows it to be recreated as needed\n        internalState.subProcess = null;\n        res(false);\n      };\n\n      const listener = (receivedMessage) => {\n        if (receivedMessage.type === message) {\n          subprocess.offMessage(listener);\n          subprocess.offExit(exitListener);\n          res(receivedMessage.payload || true);\n        }\n      };\n\n      subprocess.onMessage(listener);\n      subprocess.onExit(exitListener);\n    });\n  }\n\n  const createSubProcessIfNoneExists = async ({\n    env,\n  }: {\n    env: ContentEngineConfiguration[\"env\"];\n  }): Promise<{\n    isRunning: boolean;\n  }> => {\n    if (!internalState.subProcess) {\n      state.exited = false;\n      state.exitCode = undefined;\n      internalState.env = env || internalState.env;\n\n      reporter.verbose(`[content-engine] starting subprocess`);\n\n      const contentEngineDir =\n        resolveFromContentEngine(\n          `/services/content-engine`,\n          engineOptions?.directory,\n        ) || require.resolve(`./services/content-engine`);\n\n      const reduxDir =\n        resolveFromContentEngine(`/redux`, engineOptions?.directory) ||\n        require.resolve(`./redux`);\n\n      internalState.subProcess = new ControllableScript(\n        `\n          const engineOptions = ${JSON.stringify(engineOptions)}\n          const { contentEngine } = require(\"${contentEngineDir}\")\n          const { saveState } = require(\"${reduxDir}\")\n\n          const engine = contentEngine(engineOptions)\n\n          if (!process.send) {\n            throw new Error(\n              'Started Content Engine as a subprocess, but no parent was found.'\n            )\n          }\n\n          process.send({\n            type: 'CONTENT_ENGINE_CHILD_RUNNING',\n          })\n\n          process.on('message', async message => {\n            if (message.type === 'COMMAND' && message.action?.type === 'EXIT') {\n              saveState()\n              const code = typeof message.action?.payload === 'number'\n                ? message.action.payload\n                : 0\n\n              process.exit(code)\n            } else if (message.type === 'CONTENT_ENGINE_CHILD_SYNC_DATA') {\n              engine.sync(message.payload).then(() => {\n                process.send({\n                  type: 'CONTENT_ENGINE_CHILD_FINISHED_SYNCING_DATA',\n                })\n              }).catch(e => {\n                process.send({\n                  type: 'CONTENT_ENGINE_CHILD_FINISHED_SYNCING_DATA',\n                  payload: {\n                    error: {\n                      message: e.message,\n                      stack: e.stack\n                    }\n                  }\n                })\n              })\n            } else if (message.type === 'CONTENT_ENGINE_CHILD_QUERY') {\n              engine.test.query(message.payload.query, message.payload.variables).then(result => {\n                process.send({\n                  type: 'CONTENT_ENGINE_CHILD_QUERY_RESULT--' + message.payload.queryId,\n                  payload: {\n                    result\n                  }\n                })\n              }).catch(e => {\n                console.error(e)\n                process.send({\n                  type: 'CONTENT_ENGINE_CHILD_QUERY_RESULT--' + message.payload.queryId,\n                  payload: {\n                    error: e.message,\n                    stack: e.stack\n                  }\n                })\n              })\n            } else if (message.type === 'CONTENT_ENGINE_CHILD_INITIALIZE') {\n              engine.initialize(message.payload).then(() => {\n                process.send({\n                  type: 'CONTENT_ENGINE_CHILD_FINISHED_INITIALIZING',\n                })\n              }).catch(e => {\n                process.send({\n                  type: 'CONTENT_ENGINE_CHILD_FINISHED_INITIALIZING',\n                  error: {\n                    message: e.message,\n                    stack: e.stack\n                  }\n                })\n              })\n            } else if (message.type === 'CONTENT_ENGINE_CHILD_INVOKE_TEST_UTIL') {\n              const responseType = 'CONTENT_ENGINE_CHILD_INVOKE_TEST_UTIL_RESULT--' + message.payload.messageId\n\n              function sendError(e) {\n                console.error(e)\n                process.send({\n                  type: 'CONTENT_ENGINE_CHILD_INVOKE_TEST_UTIL_RESULT--' + message.payload.messageId,\n                  payload: {\n                    error: e.message,\n                    stack: e.stack\n                  }\n                })\n              }\n\n              try {\n                const promiseOrResult = engine.test[message.payload.utilName](...message.payload.args)\n\n                if (promiseOrResult && 'then' in promiseOrResult) {\n                  promiseOrResult.then(result => {\n                    process.send({\n                      type: responseType,\n                      payload: {\n                        result\n                      }\n                    })\n                  }).catch(sendError)\n                } else {\n                  process.send({\n                    type: responseType,\n                    payload: {\n                      result: promiseOrResult\n                    }\n                  })\n                }\n              } catch (e) {\n                sendError(e)\n              }\n            }\n          })\n      `,\n        null,\n        {\n          printLogs: engineOptions?.printLogs,\n        },\n      );\n\n      internalState.subProcess.start({\n        env: internalState.env,\n        directory: engineOptions?.directory,\n      });\n\n      internalState.subProcess.process!.stdout?.on(`data`, (data) => {\n        internalState.stdOutListeners.forEach((listener) => listener(data));\n      });\n\n      internalState.subProcess.process!.stderr?.on(`data`, (data) => {\n        internalState.stdErrListeners.forEach((listener) => listener(data));\n      });\n\n      internalState.subProcess.onMessage((message) => {\n        internalState.messageListeners.forEach((listener) => listener(message));\n      });\n\n      internalState.subProcess.onExit((exitCode) => {\n        state.exitCode = exitCode || undefined;\n\n        const proc = internalState.subProcess?.process;\n\n        if (proc?.killed || typeof exitCode === `number`) {\n          state.exited = true;\n        }\n\n        // @ts-ignore if subProcess is accessed from outside it will be recreated automatically\n        internalState.subProcess = null;\n\n        if (typeof exitCode === `number` && exitCode !== 0) {\n          console.error(\n            `[content-engine] Process stopped with exit code ${exitCode}`,\n          );\n        }\n      });\n\n      if (!internalState.processListenersWereSet) {\n        internalState.processListenersWereSet = true;\n        interface ShutdownServicesOptions {\n          subProcess: ControllableScript;\n          code?: number | null;\n        }\n\n        function shutdownService(\n          {\n            subProcess,\n            code,\n          }: Partial<ShutdownServicesOptions & typeof internalState>,\n          signal: NodeJS.Signals,\n        ): Promise<void> {\n          if (!subProcess) {\n            return Promise.resolve();\n          }\n\n          return subProcess\n            .stop(signal, code || 0)\n            .catch(() => {})\n            .then(() => {});\n        }\n\n        process.on(`message`, (msg) => {\n          internalState.subProcess?.send(msg);\n        });\n\n        process.on(`SIGINT`, async () => {\n          await shutdownService(internalState, `SIGINT`);\n\n          process.exit(0);\n        });\n\n        process.on(`SIGTERM`, async () => {\n          await shutdownService(internalState, `SIGTERM`);\n\n          process.exit(0);\n        });\n\n        onExit((code, signal) => {\n          shutdownService(\n            {\n              subProcess: internalState.subProcess,\n              code,\n            },\n            signal as NodeJS.Signals,\n          );\n        });\n      }\n\n      reporter.verbose(`[content-engine] waiting for subprocess to start`);\n      const isRunning = await onceReceived(`CONTENT_ENGINE_CHILD_RUNNING`);\n\n      return {\n        isRunning,\n      };\n    }\n\n    return {\n      isRunning: true,\n    };\n  };\n\n  const sendFrameworkContext = (context: FrameworkContext) => {\n    if (internalState.subProcess) {\n      internalState.subProcess.send({\n        type: `CONTENT_ENGINE_FRAMEWORK_CONTEXT`,\n        context,\n      });\n    }\n  };\n\n  const initialize: ContentEnginePublicAPI[\"initialize\"] = async (\n    { clearCache, env, context } = {\n      clearCache: false,\n    },\n  ): Promise<void> => {\n    if (env && internalState.subProcess) {\n      log(`restarting process since env vars were passed to initialize`);\n      await stop();\n    }\n\n    if (clearCache) {\n      await deleteCache();\n    }\n\n    const { isRunning } = await createSubProcessIfNoneExists({\n      env: env || engineOptions?.env,\n    });\n\n    if (context) {\n      sendFrameworkContext(context);\n    }\n\n    if (!isRunning) {\n      reporter.verbose(`[content-engine] subprocess exited.`);\n      // return early if not running. this means the process exited.\n      return;\n    }\n\n    internalState.subProcess!.send({\n      type: `CONTENT_ENGINE_CHILD_INITIALIZE`,\n    });\n\n    const result = await onceReceived(\n      `CONTENT_ENGINE_CHILD_FINISHED_INITIALIZING`,\n    );\n\n    if (result?.error) {\n      const newErr = new Error(result.error.message);\n      newErr.stack = result.error.stack;\n\n      throw newErr;\n    }\n  };\n\n  const deleteCache = async (): Promise<void> => {\n    await stop();\n    const cachePath = path.join(engineOptions!.directory!, `.cache`);\n\n    if (existsSync(cachePath)) {\n      await rm(cachePath, {\n        recursive: true,\n        force: true,\n      });\n    }\n\n    await getStore().resetCache();\n  };\n\n  const sync: ContentEnginePublicAPI[\"sync\"] = async (\n    {\n      clearCache = false,\n      runServer,\n      webhookBody,\n      env,\n      context,\n      buildSchema = true,\n      connector,\n    } = {\n      buildSchema: true,\n    },\n  ): Promise<SyncState> => {\n    state.error = undefined;\n\n    if (runServer && !buildSchema) {\n      throw new Error(\n        `Cannot run server without building schema. Set \"runServer: true\" or \"buildSchema: false\" to fix this.`,\n      );\n    }\n\n    reporter.verbose(`[content-engine] sync, ${JSON.stringify(env, null, 2)}`);\n\n    if (\n      env &&\n      internalState.subProcess &&\n      JSON.stringify(env) !== JSON.stringify(internalState.env)\n    ) {\n      log(`restarting process since new env vars were passed to sync`);\n      // eslint-disable-next-line @typescript-eslint/no-use-before-define\n      await stop();\n    }\n\n    if (clearCache) {\n      await deleteCache();\n    }\n\n    const { isRunning } = await createSubProcessIfNoneExists({\n      env: env || engineOptions?.env,\n    });\n\n    if (context) {\n      sendFrameworkContext(context);\n    }\n\n    if (!isRunning) {\n      reporter.verbose(`[content-engine] subprocess exited.`);\n      // return early if not running. this means the process exited.\n      return state;\n    }\n\n    internalState.subProcess!.send({\n      type: `CONTENT_ENGINE_CHILD_SYNC_DATA`,\n      payload: {\n        runServer,\n        webhookBody,\n        buildSchema,\n        connector,\n      },\n    });\n\n    reporter.verbose(`[content-engine] waiting for subprocess to finish sync`);\n    const { error } =\n      (await onceReceived(`CONTENT_ENGINE_CHILD_FINISHED_SYNCING_DATA`)) || {};\n\n    if (error) {\n      state.error = {\n        message: error.message,\n        stack: error.stack,\n      };\n      reporter.verbose(\n        `[content-engine] subprocess finished syncing with errors.`,\n      );\n    } else {\n      reporter.verbose(`[content-engine] subprocess finished sync`);\n    }\n\n    return { ...state, error: state.error ? { ...state.error } : undefined };\n  };\n\n  const restart: ContentEnginePublicAPI[\"restart\"] = async (\n    { env, clearCache, buildSchema = true, ...options } = {\n      buildSchema: true,\n    },\n  ): Promise<SyncState> => {\n    await stop();\n\n    if (clearCache) {\n      await deleteCache();\n    }\n\n    log(`restarting subprocess`);\n\n    await createSubProcessIfNoneExists({\n      env,\n    });\n\n    return sync({ ...options, buildSchema });\n  };\n\n  const stop = async (\n    signal?: NodeJS.Signals,\n    code: number = 0,\n  ): Promise<void> => {\n    if (internalState.subProcess) {\n      log(`stopping subprocess`);\n\n      // if a debugger is attached, the process must be killed with SIGKILL or it will hang indefinitely\n      const inDebugMode = inspector.url() !== undefined;\n      const exitSignal = inDebugMode ? `SIGKILL` : signal || null;\n\n      await internalState.subProcess.stop(exitSignal, code);\n\n      // @ts-ignore if subProcess is accessed from outside it will be recreated automatically\n      internalState.subProcess = null;\n    }\n  };\n\n  async function deferTestUtilToSubProcess(\n    utilName: string,\n    args: Array<any>,\n  ): Promise<any> {\n    if (!internalState.subProcess) {\n      throw new Error(\n        `contentEngine().test.${utilName}() can only be called when content engine is running.`,\n      );\n    }\n\n    // @ts-ignore\n    const messageId = crypto.randomUUID();\n\n    internalState.subProcess.send({\n      type: `CONTENT_ENGINE_CHILD_INVOKE_TEST_UTIL`,\n      payload: {\n        args,\n        messageId,\n        utilName,\n      },\n    });\n\n    const message = await onceReceived(\n      `CONTENT_ENGINE_CHILD_INVOKE_TEST_UTIL_RESULT--${messageId}`,\n    );\n\n    if (message?.error) {\n      if (message.error.startsWith(`Error:`)) {\n        message.error = message.error.replace(`Error: `, ``);\n      }\n\n      const newErr = new Error(message.error.message);\n      newErr.stack = message.error.stack;\n\n      throw newErr;\n    }\n\n    return message?.result;\n  }\n\n  function getStore(): IDataStore {\n    internalState.store ||= getLmdbStore({\n      dbPath: getDefaultDbPath(engineOptions?.directory),\n    });\n    return internalState.store;\n  }\n\n  const engineApi: ContentEnginePublicAPI = {\n    initialize,\n    sync,\n    restart,\n    stop,\n    config: async (newConfig: ContentEngineConfiguration) => {\n      const normConfig = {\n        directory: newConfig.directory || process.cwd(),\n        ...(newConfig || {}),\n      };\n\n      if (JSON.stringify(normConfig) !== JSON.stringify(engineOptions)) {\n        reporter.info(\n          `[content-engine] restarting process since config changed`,\n        );\n        await stop();\n\n        const newEngine = contentEngine(normConfig);\n\n        // update the engineApi with the new engine's methods\n        // so that calling engine.sync() will use the new engine config instead of the old one\n        Object.keys(engineApi).forEach((key) => {\n          engineApi[key] = newEngine[key];\n        });\n\n        return newEngine;\n      } else {\n        reporter.verbose(\n          `[content-engine] reusing existing engine since the config didn't change`,\n        );\n        return engineApi;\n      }\n    },\n\n    test: throwOutsideTestEnv({\n      getNodes: () => deferTestUtilToSubProcess(`getNodes`, []),\n      getNodesByType: (...args) =>\n        deferTestUtilToSubProcess(`getNodesByType`, [...args]),\n      getNode: (...args) => deferTestUtilToSubProcess(`getNode`, [...args]),\n      query: (...args: Array<any>) =>\n        deferTestUtilToSubProcess(`query`, [...args]),\n    }),\n\n    store: {\n      getNode: (id) => getStore().getNode(id),\n      getTypes: () => getStore().getTypes(),\n      countNodes: (type) => getStore().countNodes(type),\n      getNodes: () => getStore().iterateNodes(),\n      getNodesByType: (type) => getStore().iterateNodesByType(type),\n      runQuery: (args) => {\n        process.env.GATSBY_EXPERIMENTAL_LMDB_INDEXES ||= `1`;\n        return getStore().runQuery(args);\n      },\n    },\n\n    getProcess(): ChildProcess {\n      createSubProcessIfNoneExists({\n        env: internalState.env,\n      });\n\n      return internalState.subProcess!.process!;\n    },\n\n    onStdOut(callback: (data: string) => void): void {\n      internalState.stdOutListeners.push(callback);\n    },\n    onStdErr(callback: (data: string) => void): void {\n      internalState.stdErrListeners.push(callback);\n    },\n    onMessage(callback: (message: any) => void): void {\n      internalState.messageListeners.push(callback);\n    },\n    sendMessage(message: any): void {\n      if (internalState.subProcess) {\n        internalState.subProcess.send(message);\n      } else {\n        throw new Error(\n          `contentEngine().sendMessage() can only be called when content engine is running.`,\n        );\n      }\n    },\n    clearListeners(): void {\n      internalState.stdErrListeners = [];\n      internalState.stdOutListeners = [];\n      internalState.messageListeners = [];\n    },\n  };\n\n  return engineApi;\n};\n\nexport function throwOutsideTestEnv<T>(fns: Record<string, any>): T {\n  return Object.fromEntries(\n    Object.entries(fns).map(([name, fn]: any) => [\n      name,\n      (...args) => {\n        if (process.env.NODE_ENV !== `test`) {\n          throw new Error(\n            `contentEngine().test.${name}() can only be called from within tests.`,\n          );\n        }\n\n        return fn(...args);\n      },\n    ]),\n  );\n}\n"],"mappings":"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"}