import type { NetlifyPluginOptions } from "@netlify/build";
import { NetlifyIntegrationClient } from "./api/integration.js";
export type { NetlifyClient, Site, Account, EnvironmentVariableValue, EnvironmentVariable, CreateHookRequest, BuildHookResponse, } from "./api/netlify.js";
export { NetlifyIntegration } from "./integration/index.js";
export { NetlifyIntegrationUI } from "./integration/ui/index.js";
export * from "@netlify/integrations";
export { z } from "zod";
export type BuildHookType = "onPreBuild" | "onBuild" | "onPostBuild" | "onSuccess" | "onError" | "onEnd" | "onPreDev" | "onDev";
export declare const BuildHook: Record<string, BuildHookType>;
export type BuildHookFunction = (options: NetlifyPluginOptions) => Promise<void>;
export type BuildHookWithContext<Context extends Record<string, any> = Record<string, never>, Config extends Record<string, any> = Record<string, never>> = (options: {
    buildContext?: Context;
    buildConfig?: Config;
} & Omit<NetlifyPluginOptions, "inputs">) => void | Promise<void>;
export type BuildHookOptions = {
    if: (buildConfig: Record<string, any>) => boolean | undefined;
};
export type NetlifySdkContext<SiteConfig = any, TeamConfig = any> = {
    client: NetlifyIntegrationClient<SiteConfig, TeamConfig>;
    siteId?: string;
    teamId?: string;
    providerOAuthToken?: string;
    hasConnector: boolean;
    hasBuildEventHandler: boolean;
};
export { NetlifyIntegrationClient } from "./api/integration.js";
export { UIElementButtonOptions, UIElementCardOptions, UIElementFormOptions, UIElementSectionOptions, UIElementTextOptions, UIElementInputTextOptions, UIElementInputSelectOptions, UIElementInputPasswordOptions, UIElementUnorderedListOptions, UIElementLinkOptions, UIElementDisableIntegrationSectionOptions, UIElementOrderedListOptions, UIElementCodeSnippetOptions, UIElementConnectionOptions, UIElementAlertOptions, } from "./integration/ui/types.js";
export { SurfaceRoute } from "./integration/ui/surface/surfaceRoute.js";
export { CallbackFunc, SurfaceState } from "./integration/ui/surface/types.js";
export type { 
/** @deprecated Replace with `@netlify/sdk/connector#PlatformType` */
PlatformType, 
/** @deprecated Replace with `@netlify/sdk/connector#ConnectorContext` */
ConnectorContext as ConnectorInit, 
/** @deprecated Replace with `@netlify/sdk/connector#ConnectorAPIUtils` */
ConnectorAPIUtils, 
/** @deprecated Replace with `@netlify/sdk/connector#APIName` */
APIName, 
/** @deprecated Replace with `@netlify/sdk/connector#APIPromiseName` */
APIPromiseName, } from "./integration/connect/sdk.js";
export type { 
/** @deprecated Replace with `@netlify/sdk/connector#ValidationError` */
ValidationError, 
/** @deprecated Replace with `@netlify/sdk/connector#Locale` */
Locale, } from "./integration/connect/types/csi.js";
export type { 
/** @deprecated Replace with `@netlify/sdk/connector#Visitor` */
Visitor, 
/** @deprecated Replace with `@netlify/sdk/connector#FieldVisitor` */
FieldVisitor, 
/** @deprecated Replace with `@netlify/sdk/connector#DefineNodeArgs` */
DefineNodeArgs, 
/** @deprecated Replace with `@netlify/sdk/connector#DefineUnionArgs` */
DefineUnionArgs, 
/** @deprecated Replace with `@netlify/sdk/connector#DefineObjectArgs` */
DefineObjectArgs, 
/** @deprecated Replace with `@netlify/sdk/connector#DefineDocumentArgs` */
DefineDocumentArgs, 
/** @deprecated Replace with `@netlify/sdk/connector#DefineEnumArgs` */
DefineEnumArgs, 
/** @deprecated Replace with `@netlify/sdk/connector#ModelField` */
ModelField, 
/** @deprecated Replace with `@netlify/sdk/connector#ModelFields` */
ModelFields, 
/** @deprecated Replace with `@netlify/sdk/connector#ModelFieldsObject` */
ModelFieldsObject, 
/** @deprecated Replace with `@netlify/sdk/connector#ModelFieldsArray` */
ModelFieldsArray, 
/** @deprecated Replace with `@netlify/sdk/connector#ModelDefinition` */
ModelDefinition, } from "./integration/connect/model/definition.js";
export type { 
/** @deprecated Replace with `@netlify/sdk/connector#Define` */
Define, 
/** @deprecated Replace with `@netlify/sdk/connector#Models` */
Models, 
/** @deprecated Replace with `@netlify/sdk/connector#ModelsIteratorObject` */
ModelsIteratorObject, 
/** @deprecated Replace with `@netlify/sdk/connector#Modeler` */
Modeler, 
/** @deprecated Replace with `@netlify/sdk/connector#ModelerArgs` */
ModelerArgs, 
/** @deprecated Replace with `@netlify/sdk/connector#ModelBuilder` */
ModelBuilder, } from "./integration/connect/model/builder.js";
export type { UpdateOperation, UpdateOperationField } from "@stackbit/types";
export { 
/** @deprecated Replace with `@netlify/sdk/connector#CreateConfig` */
CreateConfig, 
/** @deprecated Replace with `@netlify/sdk/connector#configureNetlifyCreate` */
configureNetlifyCreate, } from "./integration/connect/utils/create-config.js";
