import type { ContentSourceInterface } from "@stackbit/types";
import type { NetlifyIntegration } from "../../index.js";
export default class CreateConnector implements ContentSourceInterface<any, any, any, any, any> {
    integration: Promise<NetlifyIntegration<import("zod").ZodUnknown, import("zod").ZodUnknown, import("zod").ZodUnknown, import("zod").ZodUnknown>>;
    options: Record<string, any>;
    private instanceID;
    private connector;
    constructor(args?: {
        options?: Record<string, any>;
    });
    private get bridge();
    getContentSourceType(): string;
    getProjectId(): string;
    getVersion(): Promise<{
        interfaceVersion: string;
        contentSourceVersion: string;
    }>;
    getProjectEnvironment(): string;
    reset(): Promise<void>;
    destroy(): Promise<void>;
    getSchema(): Promise<{
        models: (import("@stackbit/types").ObjectModel<unknown> | import("@stackbit/types").PageModel<unknown> | import("@stackbit/types").DataModel<unknown>)[];
        locales: import("@stackbit/types").Locale[];
        context: {};
    }>;
    validateDocuments(): Promise<{
        errors: never[];
    }>;
    getLocales: () => import("@stackbit/types").Locale[];
    getProjectManageUrl: () => string;
    init: (args: any) => Promise<void>;
    getDocuments: () => Promise<import("@stackbit/types").Document<unknown>[]>;
    getAssets: () => Promise<import("@stackbit/types").Asset<unknown>[]>;
    hasAccess: (args: any) => Promise<any>;
    uploadAsset: (args: any) => Promise<import("@stackbit/types").Asset<unknown>>;
    updateDocument: (args: any) => Promise<any>;
    createDocument: (args: any) => Promise<any>;
    deleteDocument: (args: any) => Promise<any>;
    publishDocuments: (args: any) => Promise<any>;
    getModels: () => Promise<(import("@stackbit/types").ObjectModel<unknown> | import("@stackbit/types").PageModel<unknown> | import("@stackbit/types").DataModel<unknown>)[] | undefined>;
}
