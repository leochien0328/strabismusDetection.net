import { ContentSourceInterface, Locale, Cache } from "@stackbit/types";
import { BridgePluginAPI } from "./bridge.js";
type CSIArgs = ExtractFirstArgFrom<ContentSourceInterface, "hasAccess" | "uploadAsset" | "updateDocument" | "createDocument" | "deleteDocument" | "publishDocuments" | "init">;
export declare class CSIBridgeAPI extends BridgePluginAPI {
    cache?: Cache;
    get stackbitCache(): Cache;
    init({ cache }: CSIArgs["init"]): Promise<void>;
    hasAccess(args: CSIArgs["hasAccess"]): Promise<any>;
    uploadAsset(args: CSIArgs["uploadAsset"]): Promise<import("@stackbit/types").Asset<unknown>>;
    updateDocument(args: CSIArgs["updateDocument"]): Promise<any>;
    createDocument(args: CSIArgs["createDocument"]): Promise<any>;
    deleteDocument(args: CSIArgs["deleteDocument"]): Promise<any>;
    publishDocuments(args: CSIArgs["publishDocuments"]): Promise<any>;
    getModels(): Promise<(import("@stackbit/types").ObjectModel<unknown> | import("@stackbit/types").PageModel<unknown> | import("@stackbit/types").DataModel<unknown>)[] | undefined>;
    getLocales(): Locale[];
    getProjectManageUrl(): string;
    private connectSyncFinished;
    getDocuments(): Promise<import("@stackbit/types").Document<unknown>[]>;
    getAssets(): Promise<import("@stackbit/types").Asset<unknown>[]>;
}
type ExtractFirstArg<F> = F extends (...args: infer Params) => any ? Params[0] : never;
type ExtractFirstArgFrom<T, K extends keyof T> = {
    [P in K]: ExtractFirstArg<T[P]>;
};
export {};
