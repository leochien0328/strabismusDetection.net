import { MutationContext } from './mutation.public-context';
import { ApiCallContext } from './api-call.public-context';
import { QueryContext } from './query.public-context';
import { AiChatbotActionType, DatabaseActionType, StorageActionType, TopicActionType } from '../public-types/bundle-data.public-types';
import { ClientConnectionState } from '../public-types/socket.public-types';
import { DocumentData } from '../public-types/document.public-types';
import { MutationType } from '../public-types/mutation.public-types';
import { ClientId, SquidDocId } from '../public-types/communication.public-types';
import { TopicReadContext, TopicWriteContext } from './topic.public-context';
import { DistributedLockContext } from './distributed-lock.public-context';
import { GraphqlContext } from './graphql.public-context';
import { AiChatbotMutationContext } from './ai-chatbot.public-context';
import { StorageContext } from '../public-types/storage.types';
import { NativeQueryContext } from './native-query.public-context';
import { AiChatbotChatContext } from '../public-types/ai-chatbot.public-types';
export type SecureDatabaseAction<T extends DatabaseActionType> = T extends 'all' ? () => boolean | Promise<boolean> : T extends 'read' ? ((context: QueryContext) => boolean | Promise<boolean>) | (() => boolean | Promise<boolean>) : ((context: MutationContext) => boolean | Promise<boolean>) | (() => boolean | Promise<boolean>);
export type SecureStorageAction<T extends StorageActionType> = T extends 'all' ? () => boolean | Promise<boolean> : (context: StorageContext) => boolean | Promise<boolean>;
export type SecureTopicAction<T extends TopicActionType> = T extends 'all' ? () => boolean | Promise<boolean> : T extends 'read' ? ((context: TopicReadContext) => boolean | Promise<boolean>) | (() => boolean | Promise<boolean>) : ((context: TopicWriteContext<T>) => boolean | Promise<boolean>) | (() => boolean | Promise<boolean>);
export type SecureApiAction = ((context: ApiCallContext) => boolean | Promise<boolean>) | (() => boolean | Promise<boolean>);
export type SecureNativeQueryAction = ((context: NativeQueryContext) => boolean | Promise<boolean>) | (() => boolean | Promise<boolean>);
export type SecureDistributedLockAction = ((context: DistributedLockContext) => boolean | Promise<boolean>) | (() => boolean | Promise<boolean>);
export type SecureGraphQLAction = ((context: GraphqlContext) => boolean | Promise<boolean>) | (() => boolean | Promise<boolean>);
export type SecureAiChatbotAction<T extends AiChatbotActionType> = T extends 'all' ? () => boolean | Promise<boolean> : T extends 'chat' ? ((context: AiChatbotChatContext) => boolean | Promise<boolean>) | (() => boolean | Promise<boolean>) : ((context: AiChatbotMutationContext) => boolean | Promise<boolean>) | (() => boolean | Promise<boolean>);
export type ClientConnectionStateChangeAction = (clientId: ClientId, clientConnectionState: ClientConnectionState) => Promise<void> | void;
export type ExecutableAction = (...args: any[]) => any;
export type AiFunctionAction<T extends Record<string, any> = any> = (params: T) => any;
export type TriggerAction = ((request: TriggerRequest) => void | Promise<void>) | (() => void | Promise<void>);
export interface TriggerRequest<T extends DocumentData = any> {
    squidDocId: SquidDocId;
    mutationType: MutationType;
    docBefore?: T;
    docAfter?: T;
}
export type SchedulerAction = () => void | Promise<void>;
export type LimitedAction = (...args: any[]) => any | Promise<any>;
export type LimiterScope = 'ip' | 'user' | 'global';
export type QuotaRenewPeriod = 'hourly' | 'daily' | 'weekly' | 'monthly' | 'quarterly' | 'annually';
export interface RateLimitOptions {
    value: number;
    scope?: LimiterScope;
}
export interface QuotaLimitOptions {
    value: number;
    scope?: LimiterScope;
    renewPeriod?: QuotaRenewPeriod;
}
export interface LimiterOptions {
    rateLimit?: RateLimitOptions[];
    quotaLimit?: QuotaLimitOptions[];
}
export type LimiterConfig = {
    rateLimit?: number | RateLimitOptions | Array<RateLimitOptions>;
    quotaLimit?: number | QuotaLimitOptions | Array<QuotaLimitOptions>;
};
export type WebhookAction = ((request: WebhookRequest) => any) | (() => any);
export interface WebhookRequest<T = any> {
    body: T;
    rawBody?: string;
    queryParams: Record<string, string>;
    headers: Record<string, string>;
    httpMethod: 'post' | 'get' | 'put' | 'delete';
    files?: Array<SquidFile>;
}
export interface WebhookResponse {
    headers: Record<string, any>;
    body: any;
    statusCode: number;
    __isWebhookResponse__: true;
}
export interface SquidFile {
    data: Uint8Array;
    fieldName: string;
    mimetype: string;
    originalName: string;
    size: number;
    encoding?: string;
}
export type ActionMethodDecorator<U> = <T extends U>(target: Object, propertyName: string, descriptor: TypedPropertyDescriptor<T>) => TypedPropertyDescriptor<T>;
