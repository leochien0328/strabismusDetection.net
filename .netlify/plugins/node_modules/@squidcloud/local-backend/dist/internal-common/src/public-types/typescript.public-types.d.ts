export interface Type<T> extends Function {
    new (...args: any[]): T;
}
export type PartialBy<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>;
type PropertiesWithPrefix<Prefix extends string> = {
    [key in `${Prefix}${string}`]: any;
};
type Pred = [0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9];
export type DeepRecord<T, RemainingDepth extends number & keyof Pred = 5, Prefix extends string = ''> = RemainingDepth extends 0 ? PropertiesWithPrefix<Prefix> : {
    [k in keyof T]-?: k extends string | number ? Record<`${Prefix}${k}`, T[k]> | (Required<T>[k] extends any[] ? never : Required<T>[k] extends object ? DeepRecord<Required<T>[k], Pred[RemainingDepth], `${Prefix}${k}.`> : never) : never;
}[keyof T];
export type UnionKeys<T> = T extends any ? keyof T : never;
export type FieldOf<T, K extends UnionKeys<T>> = Extract<T, Record<K, any>>[K];
export type Paths<T> = UnionKeys<DeepRecord<T>>;
export {};
