import { AiChatbotChatOptions, AiChatbotContext, AiChatbotMutationType, AiChatbotResourceType, AiChatModelName, AiFileUrl, AiGenerateImageOptions, ApiKeySource } from '../public-types/ai-chatbot.public-types';
import { AppId, ClientRequestId, IntegrationId } from '../public-types/communication.public-types';
import { AiChatbotProfileMetadata } from '../public-types/integrations/ai_chatbot.public-types';
import { FunctionName } from '../public-types/bundle-data.public-types';
export type AiChatResponseFormat = 'text' | 'json_object';
export interface AiChatOptions {
    maxTokens: number;
    responseFormat: AiChatResponseFormat;
    temperature: number;
    topP: number;
    instructions: Array<string>;
    clientId: string;
    fileUrls: Array<AiFileUrl>;
    functions?: Array<FunctionName>;
}
type ModelDataType = {
    maxTokens: number;
    defaultTokens: number;
};
export declare const AiModelData: Record<AiChatModelName, ModelDataType>;
export interface BaseAiChatbotRequest {
    profileId: string;
    integrationId: IntegrationId;
}
export interface AiChatbotChatRequest extends BaseAiChatbotRequest {
    clientRequestId: ClientRequestId;
    prompt: string;
    options?: AiChatbotChatOptions;
}
export interface AiGenerateImageRequest {
    prompt: string;
    options: AiGenerateImageOptions;
}
export interface AskQuestionInternalRequest {
    appId: AppId;
    model: AiChatModelName;
    prompt: string;
    options: Partial<AiChatOptions>;
}
export interface AskQuestionInternalResponse {
    answer: string;
}
export interface ContextSizeRequest {
    appId: string;
    integrationId: string;
    profileId: string;
}
export interface ContextSizeResponse {
    sizeBytes: number;
}
export interface BaseAiChatbotMutateRequest extends BaseAiChatbotRequest {
    type: AiChatbotMutationType;
    resource: AiChatbotResourceType;
}
export interface AiChatbotInsertProfileRequest extends BaseAiChatbotMutateRequest {
    type: 'insert';
    resource: 'profile';
    payload: Omit<AiChatbotProfileMetadata, 'instructions'>;
}
export interface AiChatbotInsertInstructionRequest extends BaseAiChatbotMutateRequest {
    type: 'insert';
    resource: 'instruction';
    payload: {
        id: string;
        instruction: string;
    };
}
export interface AiChatbotInsertContextRequest extends BaseAiChatbotMutateRequest {
    type: 'insert';
    resource: 'context';
    payload: {
        id: string;
        title: string;
        context: AiChatbotContext;
        file?: any;
    };
}
export interface AiChatbotUpdateProfileRequest extends BaseAiChatbotMutateRequest {
    type: 'update';
    resource: 'profile';
    payload: Partial<Omit<AiChatbotProfileMetadata, 'instructions'>>;
}
export interface AiChatbotUpdateInstructionRequest extends BaseAiChatbotMutateRequest {
    type: 'update';
    resource: 'instruction';
    payload: {
        id: string;
        instruction: string;
    };
}
export interface AiChatbotUpdateContextRequest extends BaseAiChatbotMutateRequest {
    type: 'update';
    resource: 'context';
    payload: {
        id: string;
        title?: string;
        context?: AiChatbotContext;
    };
}
export interface AiChatbotDeleteRequest extends BaseAiChatbotMutateRequest {
    type: 'delete';
    payload: {
        id?: string;
    };
}
export type AiChatbotInsertRequest = AiChatbotInsertProfileRequest | AiChatbotInsertInstructionRequest | AiChatbotInsertContextRequest;
export type AiChatbotUpdateRequest = AiChatbotUpdateProfileRequest | AiChatbotUpdateInstructionRequest | AiChatbotUpdateContextRequest;
export type AiChatbotMutateRequest = AiChatbotInsertRequest | AiChatbotUpdateRequest | AiChatbotDeleteRequest;
export interface AiChatbotMetricTag extends Record<string, string> {
    appId: string;
    integrationId: string;
    profileId: string;
    aiModel: AiChatModelName;
    apiKeySource: ApiKeySource;
}
export {};
