import { AppId, IntegrationId } from '../public-types/communication.public-types';
import { CollectionName } from '../public-types/document.public-types';
import { IntegrationType } from '../public-types/integration.public-types';
import { MutationType } from '../public-types/mutation.public-types';
import { RunPermissions } from './backend-run.types';
import { ApplicationBundleData, ServiceFunctionName } from './bundle-data.types';
import { AuthIntegrationType, DatabaseIntegrationType, IntegrationConfig, IntegrationConfigTypes, IntegrationSchema, IntegrationSchemaKeys, IntegrationSchemaTypes, IntegrationTypeWithConfig } from './integrations/schemas';
export type CodeUrl = string;
export interface TriggerConfig {
    integrationId: IntegrationId;
    collectionName: CollectionName;
    functionName: ServiceFunctionName;
    mutationTypes: Array<MutationType> | undefined;
}
export interface SchedulerConfig {
    functionName: ServiceFunctionName;
    cronExpression: string;
    exclusive: boolean;
}
export interface WebhookConfig {
    functionName: ServiceFunctionName;
}
export interface Application {
    appId: AppId;
    organizationId: string;
    creationDate: Date;
    updateDate: Date;
    allowedHosts: string[];
    integrations: Record<IntegrationId, IntegrationConfig>;
    codeUrl?: string;
    bundleData?: ApplicationBundleData;
    archiveDate?: Date;
}
export interface Schema<T extends IntegrationSchema = any> {
    appId: AppId;
    integrationId: IntegrationId;
    schema: T;
    createdAt: Date;
    updatedAt: Date;
}
export interface ApplicationInitDetails {
    codeUrl: string;
    codeUrlId: string;
    permissions: RunPermissions;
}
export interface CreateApplicationRequest {
    organizationId: string;
}
export interface CreateApplicationResponse {
    appId: AppId;
    builtInStorageIntegrationType: IntegrationType;
}
interface BaseUpsertIntegrationRequest<C extends IntegrationConfig> {
    id: IntegrationId;
    type: string;
    config: Partial<C>;
    schemaInitialized?: boolean;
}
type UpsertIntegrationRequests = {
    [K in IntegrationTypeWithConfig]: BaseUpsertIntegrationRequest<ConfigurationTypes[K]>;
};
export type UpsertDataIntegrationRequest = UpsertIntegrationRequests[DatabaseIntegrationType];
export type UpsertGraphQLIntegrationRequest = UpsertIntegrationRequests[IntegrationType.graphql];
export type UpsertApiIntegrationRequest = UpsertIntegrationRequests[IntegrationType.api];
export type UpsertAiChatbotIntegrationRequest = UpsertIntegrationRequests[IntegrationType.ai_chatbot];
export type UpsertKafkaIntegrationRequest = UpsertIntegrationRequests[IntegrationType.kafka];
export type UpsertConfluentIntegrationRequest = UpsertIntegrationRequests[IntegrationType.confluent];
export type UpsertAuthIntegrationRequest = UpsertIntegrationRequests[AuthIntegrationType];
interface BaseUpsertIntegrationSchemaRequest<T extends IntegrationType, S extends IntegrationSchema> {
    id: IntegrationId;
    type: T;
    schema: S;
}
type SchemaTypes = {
    [K in IntegrationSchemaKeys]: IntegrationSchemaTypes[K];
};
type UpsertIntegrationSchemaRequests = {
    [K in IntegrationSchemaKeys]: BaseUpsertIntegrationSchemaRequest<K, SchemaTypes[K]>;
};
export type UpsertIntegrationSchemaRequest = UpsertDataIntegrationSchemaRequest | UpsertGraphQLIntegrationSchemaRequest | UpsertApiIntegrationSchemaRequest;
export type UpsertDataIntegrationSchemaRequest = UpsertIntegrationSchemaRequests[DatabaseIntegrationType];
export type UpsertGraphQLIntegrationSchemaRequest = UpsertIntegrationSchemaRequests[IntegrationType.graphql];
export type UpsertApiIntegrationSchemaRequest = UpsertIntegrationSchemaRequests[IntegrationType.api];
export type UpsertIntegrationRequest = UpsertDataIntegrationRequest | UpsertGraphQLIntegrationRequest | UpsertApiIntegrationRequest | UpsertAiChatbotIntegrationRequest | UpsertConfluentIntegrationRequest | UpsertKafkaIntegrationRequest | UpsertAuthIntegrationRequest;
type ConfigurationTypes = {
    [K in IntegrationTypeWithConfig]: IntegrationConfigTypes[K];
};
export {};
