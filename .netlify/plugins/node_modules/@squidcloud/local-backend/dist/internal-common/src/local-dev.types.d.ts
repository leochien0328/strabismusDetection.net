import { BatchRunConfigurationRequest } from './code-executor.types';
import { LocalBackendData } from './types/bundle-data.types';
import { RunSecrets } from './types/backend-run.types';
import { LogLevel } from './types/logger.types';
export type MessageFromDeveloperType = 'bundleData' | 'response';
interface BaseMessageFromDeveloper {
    type: MessageFromDeveloperType;
    payload?: unknown;
    requestId: string;
}
export type MessageFromDeveloper = ResponseMessageFromDeveloper | BundleDataMessageFromDeveloper;
export interface ResponseMessageFromDeveloper extends BaseMessageFromDeveloper {
    type: 'response';
    payload: any;
}
export interface BundleDataMessageFromDeveloper extends BaseMessageFromDeveloper {
    type: 'bundleData';
    payload: LocalBackendData;
}
export type MessageToDeveloperType = 'executeFunction' | 'localBackendData' | 'logMessage';
interface BaseMessageToDeveloper {
    type: MessageToDeveloperType;
    payload: unknown;
    requestId: string;
}
export type MessageToDeveloper = ExecuteFunctionMessageToDeveloper | LocalBackendDataMessageToDeveloper | LogMessageToDeveloper;
export interface ExecuteFunctionMessageToDeveloper extends BaseMessageToDeveloper {
    type: 'executeFunction';
    payload: BatchRunConfigurationRequest;
}
export interface LocalBackendDataMessageToDeveloper extends BaseMessageToDeveloper {
    type: 'localBackendData';
    payload: {
        secrets: RunSecrets;
    };
}
export interface LogMessageToDeveloper extends BaseMessageToDeveloper {
    type: 'logMessage';
    payload: LogRequest;
}
export declare enum LogType {
    ALL = "ALL",
    QUERY = "QUERY",
    MUTATION = "MUTATION",
    AI = "AI",
    API = "API",
    ERROR = "ERROR"
}
export interface LogRequest {
    tag: string;
    type: LogType;
    timestamp: number;
    level: LogLevel;
    message: string;
}
export {};
