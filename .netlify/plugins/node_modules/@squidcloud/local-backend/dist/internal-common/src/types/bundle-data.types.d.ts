import { SchedulerId, TriggerId, WebhookId } from '../public-types/application.public-types';
import { ApiEndpointId } from '../public-types/integrations/api.public-types';
import { OpenApiController } from './openapi.types';
import { AiChatbotActionType, AiFunctionParam, DatabaseActionType, FunctionName, StorageActionType, TopicActionType, TopicName } from '../public-types/bundle-data.public-types';
import { IntegrationId } from '../public-types/communication.public-types';
import { CollectionName } from '../public-types/document.public-types';
import { SchedulerConfig, TriggerConfig, WebhookConfig } from './application.types';
import { LimiterOptions } from '../public-types-backend/bundle-api.public-types';
export type ServiceName = string;
export type ServiceFunctionName = `${ServiceName}:${FunctionName}`;
export interface ApplicationBundleData {
    databases: Record<IntegrationId, DatabaseMetadata>;
    storage: Record<IntegrationId, StorageMetadata>;
    apis: Record<IntegrationId, {
        endpoints: Record<ApiEndpointId, ApiMetadata>;
    } & ApiMetadata>;
    graphql: Record<IntegrationId, GraphQLMetadata>;
    executables: Record<FunctionName, ExecutableMetadata>;
    triggers: Record<TriggerId, TriggerConfig>;
    schedulers: Record<SchedulerId, SchedulerConfig>;
    webhooks: Record<WebhookId, WebhookConfig>;
    nativeQueries: Record<IntegrationId, Array<ServiceFunctionName>>;
    distributedLocks: {
        security?: Array<ServiceFunctionName>;
        mutexes?: Record<string, {
            security?: Array<ServiceFunctionName>;
        }>;
    };
    aiChatbots: Record<IntegrationId, {
        profiles: Record<string, AiChatbotMetadata>;
    } & AiChatbotMetadata>;
    clientConnectionStateChangeHandlers?: Array<ServiceFunctionName>;
    aiFunctions?: Record<FunctionName, AiFunctionMetadata>;
    openApiControllers?: Array<OpenApiController>;
    queues?: Record<IntegrationId, QueueMetadata>;
    limits?: Record<ServiceFunctionName, LimiterOptions>;
}
export interface LocalBackendData {
    applicationBundleData: ApplicationBundleData;
    openApiSpecStr?: string;
}
export interface AiFunctionMetadata {
    description: string;
    params: Array<AiFunctionParam>;
    serviceFunction: ServiceFunctionName;
}
export interface DatabaseMetadata {
    collections: Record<CollectionName, CollectionMetadata>;
    security?: Record<DatabaseActionType, Array<ServiceFunctionName>>;
    transform?: Record<DatabaseActionType, DatabaseTransformMetadata>;
}
export interface StorageMetadata {
    security?: Record<StorageActionType, Array<ServiceFunctionName>>;
}
export interface QueueMetadata {
    topics: Record<TopicName, TopicMetadata>;
    security?: Record<DatabaseActionType, Array<ServiceFunctionName>>;
    transform?: Record<DatabaseActionType, DatabaseTransformMetadata>;
}
export interface TopicMetadata {
    security?: Record<TopicActionType, Array<ServiceFunctionName>>;
}
export interface CollectionMetadata {
    security?: Record<DatabaseActionType, Array<ServiceFunctionName>>;
    transform?: Record<DatabaseActionType, DatabaseTransformMetadata>;
}
export interface DatabaseTransformMetadata {
    serviceFunction: ServiceFunctionName;
}
export interface ExecutableMetadata {
    serviceFunction: ServiceFunctionName;
}
export interface ApiMetadata {
    security: Array<ServiceFunctionName>;
}
interface GraphQLMetadata {
    security: Array<ServiceFunctionName>;
}
export interface AiChatbotMetadata {
    security: Record<AiChatbotActionType, Array<ServiceFunctionName>>;
}
export {};
