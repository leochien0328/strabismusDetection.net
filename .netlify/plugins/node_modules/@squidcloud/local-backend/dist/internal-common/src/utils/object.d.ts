export declare function getInPath(obj: unknown, path: string): any;
export declare function isDateObject(value: unknown): value is Date;
export declare function setInPath(obj: object, path: string, value: unknown, delimiter?: string): void;
export declare function deleteInPath(obj: object, path: string, delimiter?: string): void;
export declare function replaceKeyInMap<K, T>(map: Map<K, T | undefined>, a: K, b: K): void;
export declare function replaceKeyInRecord<K extends keyof any, T>(record: Record<K, T>, a: K, b: K): void;
export declare function isNil(obj: unknown): obj is null | undefined;
export declare function isEqual(a: unknown, b: unknown): boolean;
export declare function isEmpty(a: unknown): boolean;
export declare function omit<T extends object, K extends PropertyKey[]>(object: T | null | undefined, ...fieldsToRemove: K): Pick<T, Exclude<keyof T, K[number]>>;
export type CloneCustomizer = (value: unknown) => unknown | undefined;
export declare function cloneDeep<R = unknown>(value: R, customizer?: CloneCustomizer): R;
export declare function cloneShallow<T>(value: T): T;
export declare function compareValues(v1: unknown, v2: unknown): number;
export declare function mapValues<ResultType extends object = Record<string, unknown>, InputType extends Record<string, unknown> = Record<string, unknown>>(obj: InputType, valueMapperFn: (value: any, key: keyof InputType, obj: InputType) => unknown): ResultType;
export declare function groupBy<T, K extends PropertyKey>(array: T[], getKey: (item: T) => K): Record<K, T[]>;
export declare function pick<T extends object, K extends keyof T>(obj: T, keys: ReadonlyArray<K>): Pick<T, K>;
export declare function invert<K extends string | number, V extends string | number>(record: Record<K, V>): Record<V, K>;
export declare function range(start: number, end: number, step: number, maximumNumberOfItems?: number): number[];
