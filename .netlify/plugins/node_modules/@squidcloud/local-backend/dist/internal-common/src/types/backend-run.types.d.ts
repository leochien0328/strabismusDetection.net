import { Auth, RunContext } from '../public-types/context.public-types';
import { ApplicationSecrets } from './secret.types';
import { SecretKey, SecretValue } from '../public-types/secret.public-types';
export interface RunPermissions {
    hosts: Array<string>;
}
export interface ErrorResponse extends GeneralResponse {
    ok: false;
    error: string;
    details?: string;
    functionName: string;
}
export interface GeneralResponse {
    ok: boolean;
}
export interface RunConfiguration {
    codeUrl: string;
    codeUrlId: string;
    isSecurityRules: boolean;
    permissions: RunPermissions;
}
export interface LoadJsPayload {
    codeUrl: string;
}
export declare const ExecuteFunctionSecureAnnotations: readonly ["secureDistributedLock", "secureQuery", "secureMutation", "secureNamedQuery", "secureNativeQuery", "secureGraphQL", "secureApi", "secureAiChatbotChat", "secureAiChatbotMutation", "secureQueueWrite", "secureQueueRead", "secureStorage"];
export type ExecuteFunctionSecureAnnotationType = (typeof ExecuteFunctionSecureAnnotations)[number];
export type ExecuteFunctionAnnotationType = 'executable' | 'webhook' | 'scheduler' | 'trigger' | 'transformRead' | 'transformWrite' | 'metadata' | 'aiFunction' | 'openapi' | ExecuteFunctionSecureAnnotationType;
export interface ExecuteFunctionPayload {
    functionName: string;
    params: Array<unknown>;
    context: RunContext;
    auth: Auth | undefined;
    secrets?: Record<SecretKey, SecretValue>;
    backendApiKey: string;
    codeDir: string;
    executeFunctionAnnotationType: ExecuteFunctionAnnotationType;
}
export type WorkerActionType = 'loadJs' | 'executeFunction' | 'ping' | 'terminate' | 'heartbeat';
export interface ActionRequest {
    action: WorkerActionType;
    payload?: LoadJsPayload | ExecuteFunctionPayload;
}
export type LoadJsResponse = GeneralResponse;
export type TerminateResponse = GeneralResponse;
export interface ExecuteFunctionResponse extends GeneralResponse {
    ok: true;
    functionResponse: unknown;
}
export interface RunSecrets {
    custom: Record<SecretKey, SecretValue>;
    backendApiKey: string;
}
export declare function convertToRunSecrets(appSecrets: ApplicationSecrets): RunSecrets;
