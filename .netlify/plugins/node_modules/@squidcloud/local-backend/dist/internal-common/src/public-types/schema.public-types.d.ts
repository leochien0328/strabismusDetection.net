import { JSONSchema } from 'json-schema-typed';
type ConvertDeep<T extends JSONSchema> = Exclude<T, boolean> & {
    properties?: Record<string, ConvertDeep<JSONSchema>>;
    patternProperties?: Record<string, ConvertDeep<JSONSchema>>;
    nullable?: boolean;
    applyDefaultValueOn?: 'always' | 'empty' | 'updateOrEmpty';
    isDate?: boolean;
    isJSON?: boolean;
    insertable?: boolean;
    deletable?: boolean;
};
export type PropertySchema = ConvertDeep<JSONSchema>;
export type TopLevelPropertySchema = PropertySchema & {
    primaryKey?: boolean;
    isComputed?: boolean;
    isDefaultComputed?: boolean;
    dataType?: string;
    hidden?: boolean;
};
export type CollectionSchema = Omit<ConvertDeep<JSONSchema>, 'properties'> & {
    properties?: Record<string, TopLevelPropertySchema>;
};
export {};
