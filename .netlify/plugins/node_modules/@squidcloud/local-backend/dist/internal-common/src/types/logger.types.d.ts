export type LoggerContext = Record<string, any>;
export interface Logger {
    trace(message: string, context?: LoggerContext): void;
    debug(message: string, context?: LoggerContext): void;
    info(message: string, context?: LoggerContext): void;
    warn(message: string, context?: LoggerContext): void;
    error(message: string, context?: LoggerContext): void;
    log(record: LogRecord): void;
}
export declare enum LogLevel {
    TRACE = "trace",
    DEBUG = "debug",
    INFO = "info",
    WARN = "warn",
    ERROR = "error"
}
export interface LogRecord {
    level?: LogLevel;
    message?: string;
    [key: string]: any;
}
