"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isOpenApiResponse = exports.isWebhookResponse = exports.transformResponse = exports.transformParams = void 0;
const query_public_context_1 = require("../public-types-backend/query.public-context");
const mutation_public_context_1 = require("../public-types-backend/mutation.public-context");
const api_call_public_context_1 = require("../public-types-backend/api-call.public-context");
const backend_run_types_1 = require("../types/backend-run.types");
const distributed_lock_public_context_1 = require("../public-types-backend/distributed-lock.public-context");
const graphql_public_context_1 = require("../public-types-backend/graphql.public-context");
const ai_chatbot_public_context_1 = require("../public-types-backend/ai-chatbot.public-context");
const ai_chatbot_public_types_1 = require("../public-types/ai-chatbot.public-types");
function transformParams(params, executeFunctionAnnotationType) {
    switch (executeFunctionAnnotationType) {
        case 'scheduler':
            return [];
        case 'secureQuery':
            return [new query_public_context_1.QueryContext(params[0].query)];
        case 'secureMutation':
            return [
                new mutation_public_context_1.MutationContext(params[0].mutation, params[0]['beforeAndAfterDocs'], params[0]['serverTimestamp']),
            ];
        case 'secureNativeQuery':
            return [params[0]];
        case 'secureDistributedLock':
            return [new distributed_lock_public_context_1.DistributedLockContext(params[0].mutex)];
        case 'secureGraphQL':
            return [new graphql_public_context_1.GraphqlContext(params[0])];
        case 'secureApi':
            return [new api_call_public_context_1.ApiCallContext(params[0])];
        case 'secureStorage':
            return [params[0]];
        case 'secureAiChatbotChat':
            return [new ai_chatbot_public_types_1.AiChatbotChatContext(params[0])];
        case 'secureAiChatbotMutation':
            return [new ai_chatbot_public_context_1.AiChatbotMutationContext(params[0])];
        default:
            return params;
    }
}
exports.transformParams = transformParams;
function transformResponse(functionResponse, executeFunctionAnnotationType) {
    if (backend_run_types_1.ExecuteFunctionSecureAnnotations.includes(executeFunctionAnnotationType)) {
        return {
            rulesPassed: functionResponse,
            docsToHash: functionResponse ? {} : undefined,
        };
    }
    if (executeFunctionAnnotationType === 'webhook') {
        if (isWebhookResponse(functionResponse)) {
            delete functionResponse['__isWebhookResponse__'];
            return functionResponse;
        }
        functionResponse = functionResponse !== null && functionResponse !== void 0 ? functionResponse : null;
        const isStringOrNullBody = functionResponse === null || typeof functionResponse === 'string';
        const headers = {
            'content-type': isStringOrNullBody ? 'text/plain' : 'application/json',
            'cache-control': 'no-cache',
        };
        const body = isStringOrNullBody ? functionResponse || '' : JSON.stringify(functionResponse);
        const webhookResponse = {
            headers,
            body,
            statusCode: functionResponse === null ? 204 : 200,
        };
        return webhookResponse;
    }
    if (executeFunctionAnnotationType === 'openapi') {
        if (isOpenApiResponse(functionResponse)) {
            delete functionResponse['__isOpenApiResponse__'];
            return functionResponse;
        }
        functionResponse = functionResponse !== null && functionResponse !== void 0 ? functionResponse : null;
        const isStringOrNullBody = functionResponse === null || typeof functionResponse === 'string';
        const headers = {
            'content-type': isStringOrNullBody ? 'text/plain' : 'application/json',
            'cache-control': 'no-cache',
        };
        const body = isStringOrNullBody ? functionResponse || '' : JSON.stringify(functionResponse);
        const openApiResponse = {
            headers,
            body,
            statusCode: functionResponse === null ? 204 : 200,
        };
        return openApiResponse;
    }
    return functionResponse;
}
exports.transformResponse = transformResponse;
function isWebhookResponse(response) {
    return response && response.__isWebhookResponse__;
}
exports.isWebhookResponse = isWebhookResponse;
function isOpenApiResponse(response) {
    return response && response.__isOpenApiResponse__;
}
exports.isOpenApiResponse = isOpenApiResponse;
//# sourceMappingURL=backend-transforms.js.map