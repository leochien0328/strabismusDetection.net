import { IntegrationType } from '../integration.public-types';
import { FieldName } from '../document.public-types';
export type HttpMethod = 'post' | 'get' | 'delete' | 'patch' | 'put';
export type ApiEndpointId = string;
export type ApiParameterLocation = 'query' | 'body' | 'header' | 'path';
export type ApiResponseParameterLocation = 'header' | 'body';
export type ApiInjectionParameterLocation = 'header' | 'query';
export type FieldPath = string;
export type IntegrationApiEndpoints = Record<ApiEndpointId, ApiEndpoint>;
export interface ApiRequestField {
    location: ApiParameterLocation;
    description?: string;
}
export interface CallApiOptions {
    nativeResponse?: boolean;
    originOverride?: string;
}
export interface NativeApiCallResponse<BodyType = unknown> {
    body: BodyType;
    headers: Record<string, string>;
    status: number;
}
export interface ApiResponseField {
    location: ApiResponseParameterLocation;
    path?: FieldPath;
    description?: string;
}
export type ApiInjectionFieldType = 'secret' | 'regular';
export interface ApiInjectionField {
    value: string;
    type: ApiInjectionFieldType;
    location: ApiInjectionParameterLocation;
}
export interface GraphQLConnectionOptions {
    baseUrl: string;
    injectionSchema?: ApiInjectionSchema;
}
export type ApiInjectionSchema = Record<FieldName, ApiInjectionField>;
export interface OpenApiDiscoveryOptions {
    openApiSpecUrl: string;
}
export interface ApiEndpoint {
    relativePath: string;
    method: HttpMethod;
    requestSchema?: Record<FieldName, ApiRequestField>;
    responseSchema?: Record<FieldPath, ApiResponseField>;
    injectionSchema?: ApiInjectionSchema;
    tags?: Array<string>;
}
export interface DiscoverOpenApiSchemaRequest {
    integrationType: IntegrationType.api;
    discoveryOptions: OpenApiDiscoveryOptions;
}
export interface DiscoverOpenApiSchemaFromFileRequest {
    integrationType: IntegrationType.api;
}
