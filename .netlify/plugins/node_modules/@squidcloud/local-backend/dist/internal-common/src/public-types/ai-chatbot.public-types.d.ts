import { FunctionName } from './bundle-data.public-types';
export declare const OPENAI_CHAT_MODEL_NAMES: readonly ["gpt-3.5-turbo", "gpt-3.5-turbo-1106", "gpt-4", "gpt-4-turbo-preview", "gpt-4o", "gpt-4-turbo"];
export declare const GEMINI_CHAT_MODEL_NAMES: readonly ["gemini-pro"];
export declare const ANTHROPIC_CHAT_MODEL_NAMES: readonly ["claude-3-opus-20240229", "claude-3-sonnet-20240229", "claude-3-haiku-20240307", "claude-3-5-sonnet-20240620"];
export declare const AI_CHAT_MODEL_NAMES: readonly ["gpt-3.5-turbo", "gpt-3.5-turbo-1106", "gpt-4", "gpt-4-turbo-preview", "gpt-4o", "gpt-4-turbo", "claude-3-opus-20240229", "claude-3-sonnet-20240229", "claude-3-haiku-20240307", "claude-3-5-sonnet-20240620", "gemini-pro"];
export declare const OPENAI_EMBEDDINGS_MODEL_NAMES: readonly ["text-embedding-3-small", "text-embedding-3-large", "text-embedding-ada-002"];
export declare const AI_EMBEDDINGS_MODEL_NAMES: readonly ["text-embedding-3-small", "text-embedding-3-large", "text-embedding-ada-002"];
export declare const OPENAI_IMAGE_MODEL_NAMES: readonly ["dall-e-3"];
export declare const STABLE_DIFFUSION_MODEL_NAMES: readonly ["stable-diffusion-core"];
export declare const AI_IMAGE_MODEL_NAMES: readonly ["dall-e-3", "stable-diffusion-core"];
export type AiChatModelName = (typeof AI_CHAT_MODEL_NAMES)[number];
export type AiEmbeddingsModelName = (typeof AI_EMBEDDINGS_MODEL_NAMES)[number];
export type OpenAiChatModelName = (typeof OPENAI_CHAT_MODEL_NAMES)[number];
export type GeminiChatModelName = (typeof GEMINI_CHAT_MODEL_NAMES)[number];
export type AnthropicChatModelName = (typeof ANTHROPIC_CHAT_MODEL_NAMES)[number];
export type AiImageModelName = (typeof AI_IMAGE_MODEL_NAMES)[number];
export type OpenAiImageModelName = (typeof OPENAI_IMAGE_MODEL_NAMES)[number];
export type StableDiffusionModelName = (typeof STABLE_DIFFUSION_MODEL_NAMES)[number];
export type AiGenerateImageOptions = DallEOptions | StableDiffusionCoreOptions;
export type VectorDbType = 'pinecone' | 'postgres';
export interface BaseAiGenerateImageOptions {
    modelName: AiImageModelName;
}
export interface DallEOptions extends BaseAiGenerateImageOptions {
    modelName: 'dall-e-3';
    quality?: 'hd' | 'standard';
    size?: '1024x1024' | '1792x1024' | '1024x1792';
    numberOfImagesToGenerate?: 1;
}
export interface StableDiffusionCoreOptions extends BaseAiGenerateImageOptions {
    modelName: 'stable-diffusion-core';
    aspectRatio?: '16:9' | '1:1' | '21:9' | '2:3' | '3:2' | '4:5' | '5:4' | '9:16' | '9:21';
    negativePrompt?: string;
    seed?: number;
    stylePreset?: 'analog-film' | 'anime' | 'cinematic' | 'comic-book' | 'digital-art' | 'enhance' | 'fantasy-art' | 'isometric' | 'line-art' | 'low-poly' | 'modeling-compound' | 'neon-punk' | 'origami' | 'photographic' | 'pixel-art' | 'tile-texture';
    outputFormat?: 'jpeg' | 'png' | 'webp';
}
export type ApiKeySource = 'user' | 'system';
export type OpenAiResponseFormat = 'text' | 'json_object';
export type AiFileUrlType = 'image';
export interface AiFileUrl {
    type: AiFileUrlType;
    url: string;
}
export interface AiChatbotChatOptions {
    maxTokens?: number;
    chatId?: string;
    disableHistory?: boolean;
    includeReference?: boolean;
    responseFormat?: OpenAiResponseFormat;
    smoothTyping?: boolean;
    temperature?: number;
    topP?: number;
    overrideModel?: AiChatModelName;
    fileUrls?: Array<AiFileUrl>;
    functions?: Array<FunctionName>;
    instructions?: Array<string>;
}
export type AiChatbotMutationType = 'insert' | 'update' | 'delete';
export type AiChatbotResourceType = 'instruction' | 'context' | 'profile';
export type AiChatbotContextType = 'text' | 'url' | 'file';
export interface AiChatbotContextBase {
    type: AiChatbotContextType;
    data: string;
}
export interface AiChatbotTextContext extends AiChatbotContextBase {
    type: 'text';
}
export interface AiChatbotUrlContext extends AiChatbotContextBase {
    type: 'url';
    extractImages?: boolean;
    minImageWidth?: number;
    minImageHeight?: number;
}
export interface AiChatbotFileContext extends AiChatbotContextBase {
    type: 'file';
    extractImages?: boolean;
    minImageWidth?: number;
    minImageHeight?: number;
}
export declare class AiChatbotChatContext {
    readonly prompt: string;
    readonly profileId: string;
    constructor(prototype: AiChatbotChatContext);
}
export type AiChatbotContext = AiChatbotTextContext | AiChatbotUrlContext | AiChatbotFileContext;
