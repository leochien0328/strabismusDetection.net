import { CollectionName, DocumentData, FieldName } from './document.public-types';
import { Paths } from './typescript.public-types';
export type Alias = string;
export interface JoinCondition {
    leftAlias: Alias;
    left: FieldName;
    right: FieldName;
    isInner: boolean;
}
export type Condition<Doc extends DocumentData = any> = SimpleCondition<Doc> | CompositeCondition<Doc>;
export type Conditions<Doc extends DocumentData = any> = Array<Condition<Doc>>;
export interface SimpleCondition<Doc extends DocumentData = any, F extends Paths<Doc> = Paths<Doc>, MyOperator = Operator> {
    fieldName: F;
    operator: MyOperator;
    value: any;
}
export interface CompositeCondition<Doc extends DocumentData = any> {
    fields: Array<SimpleCondition<Doc, Paths<Doc>, CompositeConditionOperator>>;
}
export declare function isSimpleCondition(condition: Condition): condition is SimpleCondition;
type CompositeConditionOperator = '>=' | '<=' | '>' | '<';
export type Operator = '==' | '!=' | CompositeConditionOperator | 'like' | 'not like' | 'like_cs' | 'not like_cs' | 'array_includes_some' | 'array_includes_all' | 'array_not_includes';
export declare const ALL_OPERATORS: Array<Operator>;
export interface FieldSort<Doc> {
    fieldName: FieldName<Doc>;
    asc: boolean;
}
export interface Query<Doc extends DocumentData = any> {
    collectionName: CollectionName;
    integrationId: string;
    conditions: Conditions<Doc>;
    sortOrder: Array<FieldSort<Doc>>;
    limit: number;
    limitBy?: {
        limit: number;
        fields: Array<FieldName<Doc>>;
        reverseSort: boolean;
    };
}
export {};
