import { FieldSort, Operator, Query, SimpleCondition } from '../public-types/query.public-types';
import { DeepRecord, FieldOf, PartialBy, Paths } from '../public-types/typescript.public-types';
import { CollectionName, DocumentData } from '../public-types/document.public-types';
import { IntegrationId } from '../public-types/communication.public-types';
export declare class QueryContext<T extends DocumentData = any> {
    readonly query: Query<T>;
    private readonly parsedConditions;
    constructor(query: Query<T>);
    get integrationId(): IntegrationId;
    get collectionName(): CollectionName;
    get limit(): number;
    sortedBy(sorts: Array<PartialBy<FieldSort<T>, 'asc'>>): boolean;
    sortedByExact(sorts: Array<PartialBy<FieldSort<T>, 'asc'>>): boolean;
    isSubqueryOf<F extends Paths<T>, O extends AllOperators>(fieldName: F, operator: O, value: GenericValue<T, F, O> | null): boolean;
    isSubqueryOfCondition(condition: GeneralCondition<T>): boolean;
    isSubqueryOfConditions(conditions: GeneralConditions<T>): boolean;
    isSubqueryOfQuery(query: Query<T>): boolean;
    getConditionsFor<K extends Paths<T>>(...fieldNames: Array<K>): ContextConditions<T, K>;
    getConditionsForField<K extends Paths<T>>(fieldName: K): ContextConditions<T>;
    documentMatchesQuery(doc: DocumentData): boolean;
    private evaluateSubset;
    private evaluateIncludes;
    private parseConditions;
}
export type ContextConditions<Doc extends DocumentData = any, F extends Paths<Doc> = Paths<Doc>> = Array<ContextCondition<Doc, F>>;
export type ContextCondition<Doc extends DocumentData = any, F extends Paths<Doc> = Paths<Doc>> = InContextCondition<Doc, F> | NotInContextCondition<Doc, F> | OtherContextCondition<Doc, F>;
export interface InContextCondition<Doc extends DocumentData = any, F extends Paths<Doc> = Paths<Doc>> extends SimpleCondition<Doc, F, 'in'> {
    operator: 'in';
    value: Array<FieldOf<DeepRecord<Doc>, Paths<Doc>> | any>;
}
export interface NotInContextCondition<Doc extends DocumentData = any, F extends Paths<Doc> = Paths<Doc>> extends SimpleCondition<Doc, F, 'not in'> {
    operator: 'not in';
    value: Array<FieldOf<DeepRecord<Doc>, Paths<Doc>> | any>;
}
export interface OtherContextCondition<Doc extends DocumentData = any, F extends Paths<Doc> = Paths<Doc>> extends SimpleCondition<Doc, F, Exclude<ContextOperator, 'in' | 'not in'>> {
    operator: Exclude<ContextOperator, 'in' | 'not in'>;
    value: FieldOf<DeepRecord<Doc>, Paths<Doc>> | any;
}
export interface GeneralCondition<Doc extends DocumentData = any, F extends Paths<Doc> = Paths<Doc>> extends SimpleCondition<Doc, F, AllOperators> {
    operator: AllOperators;
    value: any;
}
export type GeneralConditions<Doc extends DocumentData = any, F extends Paths<Doc> = Paths<Doc>> = Array<GeneralCondition<Doc, F>>;
export type ContextOperator = Exclude<Operator, '==' | '!='> | 'in' | 'not in';
type AllOperators = Operator | 'in' | 'not in';
export type GenericValue<Doc = any, F extends Paths<Doc> = Paths<Doc>, O extends AllOperators = any> = O extends 'in' ? Array<DeepRecord<Doc>[F]> | null : O extends 'not in' ? Array<DeepRecord<Doc>[F]> | null : DeepRecord<Doc>[F] | null;
export {};
