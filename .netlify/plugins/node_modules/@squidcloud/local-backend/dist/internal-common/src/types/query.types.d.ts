import { AppId, ClientId, ClientRequestId } from '../public-types/communication.public-types';
import { Condition, Operator, Query } from '../public-types/query.public-types';
import { FieldType } from '../public-types/document.public-types';
export type QuerySubscriptionId = `${ClientId}_${ClientRequestId}`;
export interface QueryRequest {
    clientRequestId: ClientRequestId;
    query: Query;
    subscribe: boolean;
}
export interface QueryUnsubscribeRequest {
    clientRequestId: ClientRequestId;
}
interface QueryMetadata {
    condCount: number;
}
export declare function encodeCondition(condition: Condition<any>): EncodedCondition;
export type EncodedCondition = string;
export type QueryMapping<QueryReferenceType extends string> = {
    unconditional: Array<QueryReferenceType>;
    conditional: Record<EncodedCondition, Array<QueryReferenceType>>;
    queriesMetadata: Record<QueryReferenceType, QueryMetadata>;
};
export declare abstract class QueryMappingManager<T> {
    abstract addQuery(appId: AppId, query: Query, key: T): Promise<void>;
    abstract removeQuery(appId: AppId, key: T): Promise<Query | undefined>;
    abstract removeLocalDevAppData(appId: AppId): Promise<void>;
}
export declare function compareOperator(conditionValue: FieldType, valueInDocument: FieldType, operator: Operator): boolean;
export declare function replaceSpecialCharacters(input: string): string;
export declare function getQuerySubscriptionId(clientId: string, clientRequestId: string): QuerySubscriptionId;
export declare function parseQuerySubscriptionId(querySubscriptionId: QuerySubscriptionId): {
    clientId: string;
    clientRequestId: string;
};
export interface QueryRegisterRequest {
    clientRequestId: ClientRequestId;
    query: Query;
    parentClientRequestId: ClientRequestId;
}
export {};
