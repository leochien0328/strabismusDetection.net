"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MutationContext = void 0;
const object_1 = require("../utils/object");
const assertic_1 = require("assertic");
class MutationContext {
    constructor(mutation, beforeAndAfterDocs, serverTimeStamp) {
        this.mutation = mutation;
        this.beforeAndAfterDocs = beforeAndAfterDocs;
        this.serverTimeStamp = serverTimeStamp;
    }
    getMutationType() {
        return this.mutation.type;
    }
    get before() {
        return this.beforeAndAfterDocs.before;
    }
    get after() {
        return this.beforeAndAfterDocs.after;
    }
    affectsPath(path) {
        const before = (0, object_1.getInPath)(this.before, path);
        const after = (0, object_1.getInPath)(this.after, path);
        return !(0, object_1.isEqual)(before, after);
    }
    affectedPaths(startingRoot = '') {
        (0, assertic_1.assertTruthy)(this.mutation.type === 'update', 'affectedPaths can only be used with update mutations');
        const affectedPaths = [];
        this.checkPath(startingRoot, affectedPaths);
        return affectedPaths;
    }
    checkPath(currentPath, affectedPaths) {
        const beforeValue = (0, object_1.getInPath)(this.before, currentPath);
        const afterValue = (0, object_1.getInPath)(this.after, currentPath);
        if (!(0, object_1.isEqual)(beforeValue, afterValue)) {
            if (currentPath !== '') {
                affectedPaths.push(currentPath);
            }
            if (typeof beforeValue === 'object' &&
                beforeValue !== null &&
                typeof afterValue === 'object' &&
                afterValue !== null) {
                const beforeKeys = Object.keys(beforeValue);
                const afterKeys = Object.keys(afterValue);
                const allKeys = new Set([...beforeKeys, ...afterKeys]);
                allKeys.forEach(key => {
                    const nextPath = currentPath ? `${currentPath}.${key}` : key;
                    this.checkPath(nextPath, affectedPaths);
                });
            }
        }
    }
}
exports.MutationContext = MutationContext;
//# sourceMappingURL=mutation.public-context.js.map