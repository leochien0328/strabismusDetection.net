"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.createWebSocketWrapper = void 0;
const global_utils_1 = require("./utils/global.utils");
function noop() {
    return;
}
const isNode = typeof process !== 'undefined' && !!((_a = process.versions) === null || _a === void 0 ? void 0 : _a.node);
const WebSocketClass = isNode ? require('ws') : (0, global_utils_1.getGlobal)()['WebSocket'];
function createWebSocketWrapper(url, opts = {}) {
    let ws;
    let num = 0;
    let timer = 1;
    const $ = {
        connected: false,
        closeCalled: false,
        open() {
            var _a;
            const wsConstructor = (_a = WebSocketClass === null || WebSocketClass === void 0 ? void 0 : WebSocketClass['WebSocket']) !== null && _a !== void 0 ? _a : WebSocketClass;
            ws = new wsConstructor(url, opts.protocols || []);
            ws.onmessage = opts.onmessage
                ? (e) => {
                    if (!e.data || !opts.onmessage) {
                        console.log('No data received from websockets, please contact support@squid.cloud with this message.');
                        return;
                    }
                    opts.onmessage(e);
                }
                : noop;
            ws.onopen = function (e) {
                $.connected = true;
                (opts.onopen || noop)(e);
                num = 0;
            };
            ws.onclose = function (e) {
                $.connected = false;
                if (e.code !== 4999 && e.code !== 4001) {
                    global_utils_1.DebugLogger.debug('WebSocket closed. Reconnecting. Close code: ', e.code);
                    (opts.onclose || noop)(e);
                    $.reconnect(e);
                    return;
                }
                (opts.onclose || noop)(e);
            };
            ws.onerror = function (e) {
                $.connected = false;
                if (e && 'ECONNREFUSED' === e.code) {
                    $.reconnect(e);
                }
                else if (!$.closeCalled) {
                    (opts.onerror || noop)(e);
                }
            };
        },
        reconnect(e) {
            const maxAttempts = opts.maxAttempts !== undefined ? opts.maxAttempts : Infinity;
            if (timer && num++ < maxAttempts) {
                timer = setTimeout(function () {
                    (opts.onreconnect || noop)(e);
                    global_utils_1.DebugLogger.debug('WebSocket trying to reconnect...');
                    $.open();
                }, opts.timeoutMillis || 1000);
            }
            else {
                (opts.onmaximum || noop)(e);
            }
        },
        json(x) {
            ws.send(JSON.stringify(x));
        },
        send(x) {
            ws.send(x);
        },
        close(code = 4999, message) {
            $.closeCalled = true;
            try {
                $.connected = false;
                clearTimeout(timer);
                timer = undefined;
                ws.close(code, message);
            }
            catch (e) { }
        },
    };
    $.open();
    return $;
}
exports.createWebSocketWrapper = createWebSocketWrapper;
//# sourceMappingURL=websocket.impl.js.map