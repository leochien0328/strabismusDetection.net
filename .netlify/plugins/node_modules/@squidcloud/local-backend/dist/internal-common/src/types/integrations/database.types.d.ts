import { BaseIntegrationConfig, BaseIntegrationSchema } from './schemas';
import { IntegrationType } from '../../public-types/integration.public-types';
import { CollectionName } from '../../public-types/document.public-types';
import { CollectionSchema } from '../../public-types/schema.public-types';
export interface MongoConnectionSecretOptions {
    password?: string;
}
export interface MongoConnectionOptions {
    secrets: MongoConnectionSecretOptions;
    connectionString: string;
    user?: string;
    replicaSet?: string;
    ssl?: {
        certificateFile: string;
        validate: boolean;
    };
    maxPoolSize?: number;
    minPoolSize?: number;
    socketTimeoutMS?: number;
    serverSelectionTimeoutMS?: number;
    keepAlive?: boolean;
    directConnection?: boolean;
}
export interface MySqlConnectionSecretOptions {
    password: string;
}
export interface ClickHouseConnectionSecretOptions {
    password: string;
}
export interface BigQueryConnectionSecretOptions {
    privateKey: string;
}
export interface OracleConnectionSecretOptions {
    password: string;
}
export interface MssqlConnectionSecretOptions {
    password: string;
}
export interface PostgresConnectionSecretOptions {
    password: string;
    sslCertificate?: string;
}
export interface MySqlConnectionOptions {
    secrets: MySqlConnectionSecretOptions;
    host: string;
    user: string;
    database: string;
    connectionLimit?: number;
    sslEnabled?: boolean;
}
export interface ClickHouseConnectionOptions {
    secrets: ClickHouseConnectionSecretOptions;
    host: string;
    user: string;
    database: string;
    connectionLimit?: number;
    sslEnabled?: boolean;
}
export interface BigQueryConnectionOptions {
    secrets: BigQueryConnectionSecretOptions;
    projectId: string;
    datasetId: string;
    email: string;
}
export interface OracleConnectionOptions {
    secrets: OracleConnectionSecretOptions;
    host: string;
    user: string;
    database: string;
    connectionLimit?: number;
}
export interface MssqlConnectionOptions {
    secrets: MssqlConnectionSecretOptions;
    host: string;
    user: string;
    schemas: string;
    database: string;
    connectionLimit?: number;
    sslEnabled?: boolean;
}
export interface PostgresConnectionOptions {
    host: string;
    user: string;
    database: string;
    schema?: string;
    sslEnabled?: boolean;
    secrets: PostgresConnectionSecretOptions;
}
export interface SnowflakeConnectionSecretOptions {
    password: string;
}
export interface SnowflakeConnectionOptions {
    secrets: SnowflakeConnectionSecretOptions;
    account: string;
    username: string;
    database: string;
    schema: string;
    warehouse: string;
    role: string;
}
type TableName = string;
export interface IntegrationDataSchema extends BaseIntegrationSchema {
    collections: Record<TableName, CollectionSchema>;
}
export interface BaseDatabaseIntegrationConfig extends BaseIntegrationConfig {
}
export interface MySqlIntegrationConfiguration {
    connectionOptions: MySqlConnectionOptions;
}
export interface ClickHouseIntegrationConfiguration {
    connectionOptions: ClickHouseConnectionOptions;
}
export interface BigQueryIntegrationConfiguration {
    connectionOptions: BigQueryConnectionOptions;
}
export interface OracleIntegrationConfiguration {
    connectionOptions: OracleConnectionOptions;
}
export interface MssqlIntegrationConfiguration {
    connectionOptions: MssqlConnectionOptions;
}
export interface PostgresIntegrationConfiguration {
    connectionOptions: PostgresConnectionOptions;
}
export interface MongoIntegrationConfiguration {
    connectionOptions: MongoConnectionOptions;
}
export interface SnowflakeIntegrationConfiguration {
    connectionOptions: SnowflakeConnectionOptions;
}
export interface MySqlIntegrationConfig extends BaseDatabaseIntegrationConfig {
    configuration: MySqlIntegrationConfiguration;
}
export interface ClickHouseIntegrationConfig extends BaseDatabaseIntegrationConfig {
    configuration: ClickHouseIntegrationConfiguration;
}
export interface BigQueryIntegrationConfig extends BaseDatabaseIntegrationConfig {
    configuration: BigQueryIntegrationConfiguration;
}
export interface OracleIntegrationConfig extends BaseDatabaseIntegrationConfig {
    configuration: OracleIntegrationConfiguration;
}
export interface MssqlIntegrationConfig extends BaseDatabaseIntegrationConfig {
    configuration: MssqlIntegrationConfiguration;
}
export interface BasePostgresIntegration extends BaseDatabaseIntegrationConfig {
    configuration: PostgresIntegrationConfiguration;
}
export interface PostgresIntegrationConfig extends BasePostgresIntegration {
}
export interface CockroachIntegrationConfig extends BasePostgresIntegration {
}
export interface InternalIntegrationConfig extends BaseDatabaseIntegrationConfig {
}
export interface MongoIntegrationConfig extends BaseDatabaseIntegrationConfig {
    configuration: MongoIntegrationConfiguration;
}
export interface SnowflakeIntegrationConfig extends BaseDatabaseIntegrationConfig {
    configuration: SnowflakeIntegrationConfiguration;
}
export interface CollectionReadiness {
    hasPermissions: boolean;
    grantPermissionsCommands: string[];
    replicationEnabled: boolean;
    enableReplicationCommands: string[];
}
export interface DiscoverDataConnectionSchemaResponse {
    schema: IntegrationDataSchema;
    collectionReadiness: Record<CollectionName, CollectionReadiness>;
}
interface DiscoverMongoDataConnectionSchemaRequest {
    integrationType: IntegrationType.mongo;
    connectionOptions: MongoConnectionOptions;
}
interface DiscoverInternalDataConnectionSchemaRequest {
    integrationType: IntegrationType.built_in_db;
}
interface DiscoverMysqlDataConnectionSchemaRequest {
    integrationType: IntegrationType.mysql;
    connectionOptions: MySqlConnectionOptions;
}
interface DiscoverClickHouseDataConnectionSchemaRequest {
    integrationType: IntegrationType.clickhouse;
    connectionOptions: ClickHouseConnectionOptions;
}
interface DiscoverBigQueryDataConnectionSchemaRequest {
    integrationType: IntegrationType.bigquery;
    connectionOptions: BigQueryConnectionOptions;
}
interface DiscoverOracleDataConnectionSchemaRequest {
    integrationType: IntegrationType.oracledb;
    connectionOptions: OracleConnectionOptions;
}
interface DiscoverMssqlDataConnectionSchemaRequest {
    integrationType: IntegrationType.mssql;
    connectionOptions: MssqlConnectionOptions;
}
interface DiscoverPostgresDataConnectionSchemaRequest {
    integrationType: IntegrationType.postgres;
    connectionOptions: PostgresConnectionOptions;
}
interface DiscoverSnowflakeDataConnectionSchemaRequest {
    integrationType: IntegrationType.snowflake;
    connectionOptions: SnowflakeConnectionOptions;
}
interface DiscoverCockroachDataConnectionSchemaRequest {
    integrationType: IntegrationType.cockroach;
    connectionOptions: PostgresConnectionOptions;
}
export interface TestDataConnectionResponse {
    success: boolean;
    errorMessage?: string;
}
export type DiscoverDataConnectionSchemaRequest = DiscoverMongoDataConnectionSchemaRequest | DiscoverInternalDataConnectionSchemaRequest | DiscoverMysqlDataConnectionSchemaRequest | DiscoverClickHouseDataConnectionSchemaRequest | DiscoverBigQueryDataConnectionSchemaRequest | DiscoverOracleDataConnectionSchemaRequest | DiscoverMssqlDataConnectionSchemaRequest | DiscoverCockroachDataConnectionSchemaRequest | DiscoverPostgresDataConnectionSchemaRequest | DiscoverSnowflakeDataConnectionSchemaRequest;
export {};
