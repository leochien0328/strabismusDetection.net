/** Returns `true` if the value is `boolean`. */
export declare function isBoolean(value: unknown): value is boolean;
/** Returns `true` if the value is `string`. */
export declare function isString(value: unknown): value is string;
/** Returns `true` if the value is `number`. */
export declare function isNumber(value: unknown): value is number;
/** Returns `true` if the value is `Date` object. */
export declare function isDate(value: unknown): value is Date;
/**
 * Checks that array has only unique elements.
 * Uses `identity` function to perform checks.
 */
export declare function checkArrayHasUniqueElements<T>(array: Array<T>, identity: (e: T) => string): boolean;
/**
 * Checks if two arrays have equal elements.
 * Compares elements with by reference.
 * See `checkArraysHasEqualElementsByComparator` if you need to use a custom comparator.
 */
export declare function checkArraysHaveEqualElements<T>(array1: Array<T> | undefined, array2: Array<T> | undefined | null): boolean;
/**
 * Checks that two arrays have equal elements.
 * Returns `true` if all elements and their indexes are equal or false otherwise.
 * Uses `comparator` to compare the elements.
 */
export declare function checkArraysHasEqualElementsByComparator<T>(array1: Array<T> | undefined | null, array2: Array<T> | undefined | null, comparator: (e1: T, e2: T) => boolean): boolean;
export interface EmailConstraints {
    allowInternationalDomains: boolean;
}
/** Returns true if *email* is a valid email address. */
export declare function isEmail(email: unknown, constraints?: EmailConstraints): email is string;
/** Returns *true* if *value* is a valid 'uuid' (v1..v5) string. */
export declare function isUuid(value: unknown): value is string;
/** Returns *true* if *value* is a string that contains only hexadecimal characters or is empty. */
export declare function isHexString(value: unknown): value is string;
/** Returns true if value is not 'null' and not 'undefined'. */
export declare function isNonNullable<T = unknown>(value: T | undefined | null): value is NonNullable<T>;
