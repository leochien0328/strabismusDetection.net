import { ArrayConstraints, Assertion, AssertionErrorProvider, ObjectAssertion, ObjectAssertionConstraints, RecordConstraints } from './Assertion';
/**
 * Runs a function guarded by try/catch and returns an error message if the function throws an error.
 * Returns 'undefined' if the function run with no errors.
 */
export declare function tryCatch(fn: () => unknown): string | undefined;
export declare function validateObject<ObjectType = unknown>(value: unknown, assertion: ObjectAssertion<ObjectType>, errorContextProvider?: AssertionErrorProvider | undefined, constraints?: ObjectAssertionConstraints): string | undefined;
export declare function validateArray<ElementType = unknown>(value: unknown, elementAssertion: Assertion<ElementType>, constraints?: ArrayConstraints<ElementType>, errorContextProvider?: AssertionErrorProvider | undefined): string | undefined;
export declare function validateRecord<RecordValueType = unknown>(value: unknown, valueAssertion: Assertion<RecordValueType>, constraints?: RecordConstraints<RecordValueType>, errorContextProvider?: AssertionErrorProvider | undefined): string | undefined;
