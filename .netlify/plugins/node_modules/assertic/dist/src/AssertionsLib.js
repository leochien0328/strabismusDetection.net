"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.assertNonNullable = exports.assertDate = exports.assertEmail = exports.assertHexString = exports.assertUuid = exports.assertBoolean = exports.assertNumber = exports.assertString = exports.formatError = void 0;
const Assertion_1 = require("./Assertion");
const ChecksLib_1 = require("./ChecksLib");
const Formatter_1 = require("./Formatter");
function formatError(contextProvider, message, value) {
    const context = (0, Assertion_1.getAssertionErrorFromProvider)(contextProvider);
    if (typeof context === 'object') {
        throw context;
    }
    const renderedValue = (0, Formatter_1.formatValue)(value);
    return `${context ? `${context}: ` : ''}${message} ${renderedValue}`;
}
exports.formatError = formatError;
/*** Asserts that *value* is a *string*.  */
const assertString = (value, context = undefined) => {
    (0, Assertion_1.assertTruthy)((0, ChecksLib_1.isString)(value), () => formatError(context, 'Not a string', value));
};
exports.assertString = assertString;
const assertNumber = (value, context = undefined) => {
    (0, Assertion_1.assertTruthy)((0, ChecksLib_1.isNumber)(value), () => formatError(context, 'Not a number', value));
};
exports.assertNumber = assertNumber;
const assertBoolean = (value, context = undefined) => {
    (0, Assertion_1.assertTruthy)((0, ChecksLib_1.isBoolean)(value), () => formatError(context, 'Not a boolean', value));
};
exports.assertBoolean = assertBoolean;
const assertUuid = (value, context = undefined) => {
    (0, Assertion_1.assertTruthy)((0, ChecksLib_1.isUuid)(value), () => formatError(context, 'Invalid uuid', value));
};
exports.assertUuid = assertUuid;
const assertHexString = (value, context = undefined) => {
    (0, Assertion_1.assertTruthy)((0, ChecksLib_1.isHexString)(value), () => formatError(context, 'Invalid hex string', value));
};
exports.assertHexString = assertHexString;
const assertEmail = (value, context = undefined) => {
    (0, Assertion_1.assertTruthy)((0, ChecksLib_1.isEmail)(value), () => formatError(context, 'Invalid email', value));
};
exports.assertEmail = assertEmail;
/** Asserts that the `value` type is a `Date` object. */
const assertDate = (value, context = undefined) => {
    (0, Assertion_1.assertTruthy)(value instanceof Date, () => formatError(context, 'Invalid Date', value));
};
exports.assertDate = assertDate;
function assertNonNullable(value, context) {
    (0, Assertion_1.assertTruthy)((0, ChecksLib_1.isNonNullable)(value), () => formatError(context, `Value is ${value === undefined ? 'undefined' : 'null'}`, value));
}
exports.assertNonNullable = assertNonNullable;
//# sourceMappingURL=AssertionsLib.js.map